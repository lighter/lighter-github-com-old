<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lighter]]></title>
  <link href="http://lighter.tw/feed" rel="self"/>
  <link href="http://lighter.tw/"/>
  <updated>2015-01-12T23:28:51+08:00</updated>
  <id>http://lighter.tw/</id>
  <author>
    <name><![CDATA[Willy lighter]]></name>
    <email><![CDATA[apple.xva@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IE scroll bar hidden not work]]></title>
    <link href="http://lighter.tw/blog/2015/01/12/ie-scroll-bar-hidden-not-work/"/>
    <updated>2015-01-12T23:07:39+08:00</updated>
    <id>http://lighter.tw/blog/2015/01/12/ie-scroll-bar-hidden-not-work</id>
    <content type="html"><![CDATA[<p>情境是這樣的，今天我不想要顯示scroll bar所以用css的<code>overflow-y</code>隱藏掉，在Chrome測試時寫一個<code>mousewheel</code> event是正常的，但是在ie似乎原本的寫法不行，上網google了一下，最後使用這個解法，註冊一個<code>wheelDelta</code> event，阿然後一樣…在<code>mousewheel</code>事件內來算<code>scrollTop</code>，很簡單，但紀錄一下…</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="nx">$</span><span class="p">.</span><span class="nx">event</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;wheelDelta&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;tbody&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mousewheel&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">delta</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">wheelDelta</span> <span class="o">||</span> <span class="o">-</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">;</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">scrollTop</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">();</span>
</span><span class="line">    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">(</span><span class="nx">scrollTop</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">delta</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">30</span><span class="p">);</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>整個範例CODE我放在<a href="https://gist.github.com/lighter/aac71f62b1fb4f802fbc">GIST</a>紀錄一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift Part 7]]></title>
    <link href="http://lighter.tw/blog/2014/08/04/bi-ji-swift-part-7/"/>
    <updated>2014-08-04T23:49:38+08:00</updated>
    <id>http://lighter.tw/blog/2014/08/04/bi-ji-swift-part-7</id>
    <content type="html"><![CDATA[<h2 id="subscripts-">Subscripts 下標語法</h2>

<p>練習範例</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct testStruct {
</span><span class="line">    let multiplier: Int
</span><span class="line">    subscript(index:Int) -&gt; Int {
</span><span class="line">        return multiplier * index
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">let stuct = testStruct(multiplier: 20)
</span><span class="line">stuct[3]</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class=""><span class="line">import Cocoa
</span><span class="line">
</span><span class="line">func randomizer(#range:Range&lt;UInt32&gt;) -&gt; UInt32 {
</span><span class="line">    return range.startIndex + arc4random_uniform(range.endIndex - range.startIndex + 1)
</span><span class="line">}
</span><span class="line">
</span><span class="line">struct LevelMaker {
</span><span class="line">    var grid = Array&lt;Array&lt;UInt32&gt;&gt;()
</span><span class="line">
</span><span class="line">    mutating func makeGrid() {
</span><span class="line">        var numColumns = 27
</span><span class="line">        var numRows = 52
</span><span class="line">        for column in 0..&lt;numColumns {
</span><span class="line">            var newRow = Array&lt;UInt32&gt;()
</span><span class="line">            for row in 0..&lt;numRows {
</span><span class="line">                newRow.append(randomizer(range:1..&lt;32))
</span><span class="line">            }
</span><span class="line">            self.grid.append(newRow)
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    subscript(row:Int, column:Int) -&gt; UInt32 {
</span><span class="line">        return grid[row][column]
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    init() {
</span><span class="line">        makeGrid()
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var level2 = LevelMaker()
</span><span class="line">level2.grid
</span><span class="line">level2.grid[2][5]</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 6]]></title>
    <link href="http://lighter.tw/blog/2014/08/02/bi-ji-swift-part-6/"/>
    <updated>2014-08-02T15:57:18+08:00</updated>
    <id>http://lighter.tw/blog/2014/08/02/bi-ji-swift-part-6</id>
    <content type="html"><![CDATA[<h2 id="enums">Enums(列舉)</h2>

<p><code>enum</code>是定義一個通用型別的一組相關的值！我本身很少用，所以有點陌生…哈，還是來記錄一下，下面的code都是根據apple的文件練習的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// enum 格式
</span><span class="line">enum testEnum {
</span><span class="line">
</span><span class="line">}
</span><span class="line">
</span><span class="line">// 包含了東西南北的 compassPoint enum
</span><span class="line">enum compassPoint {
</span><span class="line">    case East
</span><span class="line">    case West
</span><span class="line">    case South
</span><span class="line">    case North
</span><span class="line">}
</span><span class="line">
</span><span class="line">// 縮減為一行
</span><span class="line">enum compassPoint2 {
</span><span class="line">    case East, West, South, North
</span><span class="line">}
</span><span class="line">
</span><span class="line">var directionToHead = compassPoint.West
</span><span class="line">
</span><span class="line">// 如果知道是 compassPoint形態，則可以忽略'compassPoint'
</span><span class="line">// 直接使用 .East
</span><span class="line">directionToHead = .East</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<h2 id="enum-with-switch">Enum with switch</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum compassPoint {
</span><span class="line">    case East
</span><span class="line">    case West
</span><span class="line">    case South
</span><span class="line">    case North
</span><span class="line">}
</span><span class="line">
</span><span class="line">var directionToHead = compassPoint.East
</span><span class="line">
</span><span class="line">switch directionToHead {
</span><span class="line">    case .East:
</span><span class="line">        println("East")
</span><span class="line">    case .West:
</span><span class="line">        println("West")
</span><span class="line">    case .South:
</span><span class="line">        println("South")
</span><span class="line">    case .North:
</span><span class="line">        println("North")
</span><span class="line">    default:
</span><span class="line">        println("No value")
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="associated-value">Associated Value</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum Barcode {
</span><span class="line">    case UPCA(Int, Int, Int)
</span><span class="line">    case QRCode(String)
</span><span class="line">}
</span><span class="line">
</span><span class="line">var productBarcode = Barcode.UPCA(1, 123_456_789, 222)
</span><span class="line">productBarcode = .QRCode("ABCDEFGHIJKLMNOP")
</span><span class="line">
</span><span class="line">switch productBarcode {
</span><span class="line">    case .UPCA(let numberSystem, let identifier, let check):
</span><span class="line">        println("UPC-A with value of \(numberSystem), \(identifier), \(check).")
</span><span class="line">    case .QRCode(let productCode):
</span><span class="line">        println("QR code with value of \(productCode).")
</span><span class="line">}
</span><span class="line">
</span><span class="line">// 輸出 "QR code with value of ABCDEFGHIJKLMNOP."</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="row-value">Row value</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum Number:Int {
</span><span class="line">    case One = 1
</span><span class="line">    case Two = 2
</span><span class="line">    case Three = 3
</span><span class="line">}
</span><span class="line">
</span><span class="line">// 縮寫成一行，僅需定義一開始
</span><span class="line">enum Number2: Int {
</span><span class="line">    case One = 1, Two, Three
</span><span class="line">}
</span><span class="line">
</span><span class="line">// 使用 toRaw 來取得值 1
</span><span class="line">var numberOne = Number.One.toRaw()
</span><span class="line">
</span><span class="line">// 將 1 轉回去取得 對應的 enum 值 One
</span><span class="line">var numberTwo = Number.fromRaw(2)
</span><span class="line">
</span><span class="line">if let two = Number.fromRaw(2) {
</span><span class="line">    switch two {
</span><span class="line">        case .Two:
</span><span class="line">            println("It is number 2")
</span><span class="line">        default:
</span><span class="line">            println("Not found")
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">else {
</span><span class="line">    println("Not found")
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 5]]></title>
    <link href="http://lighter.tw/blog/2014/07/31/bi-ji-swift-part-5/"/>
    <updated>2014-07-31T21:41:58+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/31/bi-ji-swift-part-5</id>
    <content type="html"><![CDATA[<h2 id="closure">closure</h2>

<p><code>closure</code>就有如同<code>c</code>、<code>objective-c</code>的block。<code>function</code>其實也可以當作參數一樣傳遞，下面用簡單的範例做練習。</p>

<p><img src="http://lighter.tw/images/swift/swift-36.jpg" /></p>

<!-- more -->

<p><code>closure</code>的格式如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{ (parameters) -&gt; returnType in
</span><span class="line">    statements
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>單行的表示式<code>closure</code>可以省略<code>return</code>，參數的部分甚至可以省略寫成<code>$0</code>代表第一個參數，<code>$1</code>代表第二個參數，以此類推，下面用簡單的範例表示</p>

<p><img src="http://lighter.tw/images/swift/swift-37.jpg" /></p>

<p>下面這個範例只是單純的介紹寫法而已！</p>

<p><code>sort</code>這個方法預設是做了升序排列，如果你希望降序排列，可以傳入一個function(<code>closure</code>)進去。</p>

<ul>
  <li><code>寫法1</code>很單純，傳入已經寫好的function。</li>
  <li><code>寫法2</code>則是將方法名稱、參數、回傳值省略了，並且使用<code>$0</code>表示第一個參數，<code>$1</code>為第二個以以此類推。</li>
  <li><code>寫法3</code>則是把參數也給省略了，直接使用<code>&lt;</code>符號，swift則可以自動幫你推斷要將這兩個參數做<code>&lt;</code>的邏輯。</li>
</ul>

<p><img src="http://lighter.tw/images/swift/swift-38.jpg" /></p>

<h2 id="lazydeldel-with-closure">lazy(<del>懶惰的?</del>緩慢的) with closure</h2>

<p>什麼是<code>lazy</code>?，<code>就是當你真的需要使用，才真的會分配(記憶體)給你使用</code>。至於以前<code>objcetive-c</code>的寫法可以參考這篇文章<a href="http://mikebuss.com/2014/06/22/lazy-initialization-swift/">Lazy Initialization with Swift</a>，我覺得她寫很明確，所以我就用我理解的意思大概描述一遍，至於傳統的<code>objective-c</code>的寫法我就不贅述了，畢竟這邊是swift的note。</p>

<p><code>lazy</code>在swift的使用方式如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lazy var lazyVar = [String]()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>只需要在<code>var</code>前面加上<code>lazy</code>這個keyword，還有一點要注意的是<code>lazy</code>並不能使用<code>let</code>，因為常數在初始化前是必需要有值的。</p>

<blockquote>
  <p>原本的寫法是<code>@lazy</code>後來修改為<code>lazy</code>，把小老鼠<code>@</code>給省略了。</p>
</blockquote>

<p>如果你希望你的變數有會因為一些邏輯判斷而有不同的值，這時可以用<code>closure</code>來完成，下面這段code直接貼在playground是無法使用的，他會告訴你<code>lazy</code>必須是<code>struct</code>或<code>class</code>的成員。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lazy var lazyStr:String = {
</span><span class="line">    // do you want
</span><span class="line">    return "This is a test"
</span><span class="line">}()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在什麼時候你會需要使用使用<code>lazy</code>呢?如果你的變數的值，是需要等到物件初始化完成後才能明確的定義，這時你就會需要使用，下面使用一個簡單的範例；下面範例中可以看到<code>[unowned self]</code>，這是要避免<code>strong reference cycle</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class testClass {
</span><span class="line">    var name:String
</span><span class="line">
</span><span class="line">    lazy var sayHiTo:String = {
</span><span class="line">        [unowned self] in
</span><span class="line">        return "Hi~ \(self.name)"
</span><span class="line">    }()
</span><span class="line">
</span><span class="line">    init(name:String) {
</span><span class="line">        self.name = name
</span><span class="line">
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">var myClass = testClass(name: "Maya")
</span><span class="line">// 實立化一個myClass後，這時sayHiTo變數 is nil
</span><span class="line">
</span><span class="line">myClass.sayHiTo
</span><span class="line">// 當sayHiTo這個變數被呼叫到才真正的給予值</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 4]]></title>
    <link href="http://lighter.tw/blog/2014/07/30/bi-ji-swift-part-4/"/>
    <updated>2014-07-30T21:16:15+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/30/bi-ji-swift-part-4</id>
    <content type="html"><![CDATA[<h2 id="class">class(類別)</h2>

<p>類別整個跟結構的寫法沒有太大的差異，直接看範例吧！</p>

<p><img src="http://lighter.tw/images/swift/swift-32.jpg" /></p>

<!-- more -->

<h2 id="section">繼承</h2>

<p><img src="http://lighter.tw/images/swift/swift-33.jpg" /></p>

<h2 id="class-func">class func(類別方法)</h2>

<p>類別方法可允許不用實立化物件而直接呼叫，只需要在方法前面加上<code>class</code>這個keyword；在<code>struct</code>則是要用<code>static</code>。</p>

<p><img src="http://lighter.tw/images/swift/swift-34.jpg" /></p>

<h2 id="class-ref">class ref</h2>

<p>class是參考型別，從下面的範例可以看到<code>myClass2</code>是參考<code>myClass1</code>，所以當<code>myClass1</code>有所改變，<code>myClass2</code>也會跟著改變；而struct並不會因為這樣就有所改變。</p>

<p><img src="http://lighter.tw/images/swift/swift-35.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 3]]></title>
    <link href="http://lighter.tw/blog/2014/07/26/bi-ji-swift-part-3/"/>
    <updated>2014-07-26T11:18:42+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/26/bi-ji-swift-part-3</id>
    <content type="html"><![CDATA[<h2 id="struct">Struct(結構)</h2>

<p>在<code>swift</code>，結構基本上跟類別(class)很像，直接先看簡單的範例吧！下面建立了一個<code>car</code>的結構，裡面包含了<code>color</code>和<code>number</code>，接著實立化這個<code>car</code>結構，整個跟類別很像吧！</p>

<p><img src="http://lighter.tw/images/swift/swift-29.jpg" /></p>

<!-- more -->

<p>接著再一個簡單的範例，<code>struct</code>裡面使用了別的<code>struct</code>，以及<code>struct</code>內含有方法</p>

<p><img src="http://lighter.tw/images/swift/swift-30.jpg" /></p>

<p>接這個範例能夠顯現<code>struct</code>跟類別不同的地方，在下面這個範例中可以看到<code>strunct</code>內的方法，會去操作內部的屬性，也就是<code>myName</code>，只要會去操作到內部的屬性值，在方法前面都需要加上<code>mutating</code>這個 keyword !</p>

<p><img src="http://lighter.tw/images/swift/swift-31.jpg" /></p>

<p>這是我參考stackoverflow這篇答案的[<a href="http://stackoverflow.com/a/24035861/685060">http://stackoverflow.com/a/24035861/685060</a>]，以下是我大意理解的節錄</p>

<blockquote>
  <p>結構跟類別(class)很像，不同的地方是結構有兩種模式，<code> immutable</code>/<code>mutable</code>，而類別通常的操作是用<code>reference</code>，而這種操作方式算是<code>mutable</code>，因為使用<code>reference</code>的方式操作，如果又是<code>immutable</code>的情況，這樣顯得非常困難。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 2]]></title>
    <link href="http://lighter.tw/blog/2014/07/23/bi-ji-swift-part-2/"/>
    <updated>2014-07-23T16:29:37+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/23/bi-ji-swift-part-2</id>
    <content type="html"><![CDATA[<h2 id="function">Function(函式，方法)</h2>

<p>方法的一開始前面一定有<code>func</code>這個關鍵字，我是有點覺得奇怪…何不乾脆用完整個名稱就好了，為什麼要縮減…成<code>func</code>。</p>

<p><img src="http://lighter.tw/images/swift/swift-21.jpg" /></p>

<!-- more -->

<h2 id="external-parameter-names">External Parameter Names(外部參數名)</h2>

<p><code>func</code>要帶入參數直接在<code>( )</code>內寫入，其中比較不同的是否有宣告外部參數，為了code的可讀性，加上外部參數名，可以直接了解該參數的作用，外部參數名跟參數名稱可以不一樣，如果你要將外部參數跟參數名稱設定一樣可以在參數名稱前面加上一個<code>#</code>號，這樣可省去重複打一樣的名稱。</p>

<p><img src="http://lighter.tw/images/swift/swift-22.jpg" /></p>

<h2 id="section">回傳值</h2>

<p>一個<code>func</code>要有回傳值，直接在<code>( )</code>後加上<code>-&gt; TYPE</code></p>

<p><img src="http://lighter.tw/images/swift/swift-23.jpg" /></p>

<p>如果有多個值要回傳，可以使用<code>Tuple</code></p>

<p><img src="http://lighter.tw/images/swift/swift-24.jpg" /></p>

<p>方法也可以當作參數傳入</p>

<p><img src="http://lighter.tw/images/swift/swift-25.jpg" /></p>

<h2 id="nested-function">Nested Function(嵌套函式)</h2>

<p><code>func</code>回傳除了一般的<code>Int</code>, <code>String</code>，也可以回傳<code>func</code></p>

<p><img src="http://lighter.tw/images/swift/swift-26.jpg" /></p>

<p>如果有多個參數要傳入，除了可以考慮組成一個陣列在傳入，或是可以用<code>...</code>當作有多個參數要傳入</p>

<p><img src="http://lighter.tw/images/swift/swift-27.jpg" /></p>

<h2 id="inout">inout</h2>

<p>這其實跟指標很像，下面的範例可以看到<code>sum</code>傳入的是<code>&amp;sum</code>也就是該參數的位置，所以計算的結果也會改變<code>sum</code>的值</p>

<p><img src="http://lighter.tw/images/swift/swift-28.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 1]]></title>
    <link href="http://lighter.tw/blog/2014/07/20/bi-ji-swift-part-1/"/>
    <updated>2014-07-20T15:26:30+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/20/bi-ji-swift-part-1</id>
    <content type="html"><![CDATA[<p>最近看了一下<code>swift</code>，順手記錄一下，一開始當然是最基本的語法囉，在新的<code>xcode</code>中出現了<code>playground</code>，這是一個很適合用來練習基本的語法，不用特地去建立一個大專案，也不用特地去編譯整個專案才能得到結果，這感覺跟其他語言在終端機下執行很像。以下就是簡單的記錄</p>

<!-- more -->

<p>一開始建立好<code>playground</code>的檔案就可以看到他已經為你建立好基本的範例了！但這裡並不需要使用到<code>Cocoa</code>，因為基礎的語法練習似乎還不會用到內建的東西，所以其實可以把它刪除。</p>

<p><img src="http://lighter.tw/images/swift/swift-1.jpg" /></p>

<h2 id="var">var(變數)</h2>
<p>變數的定義格式如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var VAR_NAME:TYPE = ASSIGN_VALUE</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一開始需要使用<code>var</code>來定義這是一個變數，至於變數的形態你可以自行定義或是交由編譯器來辨別，然後變數顧名思義就是會變得數，所以之後變數的直可以任意給予新的值。變數的值可以變，但變數的形態不能變，看到<code>str3</code>為<code>string</code>的形態，後面要assign一個數字就會出現錯誤。</p>

<p><img src="http://lighter.tw/images/swift/swift-2.jpg" /></p>

<h2 id="let">let(常數)</h2>
<p>常數的定義與變數不同，是使用<code>let</code>這個keyword，而且常數只能在一開始assign值，事後並不能更改他</p>

<p><img src="http://lighter.tw/images/swift/swift-3.jpg" /></p>

<h2 id="for">for(回圈)</h2>

<p>下面這個範例很明顯要印出1到5的數字但不包含5(也就是1到4)，但這裡有個小小不一樣的地方，在之前的版本使用<code>1..5</code>就可以了，這根<code>ruby</code>很像，但是後來在beta3就不能使用了，要改用<code>..&lt;</code></p>

<p><img src="http://lighter.tw/images/swift/swift-4.jpg" /></p>

<p>如果單存只是想要跑回圈並無任何變數可以將<code>i</code>取代為<code>_</code>(底線)</p>

<p><img src="http://lighter.tw/images/swift/swift-5.jpg" /></p>

<p>現在要包含最後一個數字的範圍也要跑，可以改用<code>...</code>(三個點)</p>

<p><img src="http://lighter.tw/images/swift/swift-6.jpg" /></p>

<p>如果不想遞增的跑回圈，例如基數偶數，可以改用下面這種方式來寫，這跟以前原本的<code>for</code>回圈一樣，差別就是不用小括號</p>

<p><img src="http://lighter.tw/images/swift/swift-7.jpg" /></p>

<h2 id="if">if(如果…)</h2>

<p><code>if</code>，如果條件成立，就會進去執行，這很簡單啦！就不再費言了！</p>

<p><img src="http://lighter.tw/images/swift/swift-8.jpg" /></p>

<p>我覺得比較特別也比較好的地方是這個！以往<code>1</code>也就是會被認作為<code>true</code>，所以不小心該變數的值就是<code>1</code>，那這樣判斷一定會通過，但是你並不是因為該變數為<code>1</code>就想讓它通過。但swift似乎不允許這樣，所以當你這樣定義的時候就會出現錯誤訊息，如下圖</p>

<p><img src="http://lighter.tw/images/swift/swift-9.jpg" /></p>

<h2 id="switch">switch(選擇)</h2>

<p>這裡可以看到我將<code>money</code>變數定義為<code>3_000_000</code>，這個<code>_</code>底線，在swift終是被允許的，主要是讓數字容易閱讀。而swift裡的<code>switch case</code>內是不需要寫<code>break</code>的，它自行會為每個<code>case</code>做<code>break</code>。</p>

<p><img src="http://lighter.tw/images/swift/swift-10.jpg" /></p>

<p>多條件的要執行同一個的情況呢？直接在<code>case</code>內定義多個條件，用逗點隔開，甚至你可以使用範圍的方式<code>..&lt;</code>，如下圖</p>

<p><img src="http://lighter.tw/images/swift/swift-11.jpg" /></p>

<h2 id="fallthrough">Fallthrough(貫穿)</h2>

<p>如果你希望繼續往下執行下一個<code>case</code>，你可以使用<code>fallthrough</code>，就會繼續往下一個<code>case</code>執行，但下一個如果沒有<code>fallthrough</code>就會停止，也就是說他只會執行到下一個就停止，除非你每一個<code>case</code>內都有宣告</p>

<p><img src="http://lighter.tw/images/swift/swift-12.jpg" /></p>

<h2 id="tuple-use-with-switch">Tuple(元組、組值) use with Switch</h2>

<p>這給我的感覺有點像是陣列，但其實不是，我覺得這很好用，尤其是在回傳值得時候。下面這個範例結合<code>switch</code>來使用，這邊定義一個<code>tuple</code>的變數，裡面存放了兩個數字！很簡單吧</p>

<p><img src="http://lighter.tw/images/swift/swift-13.jpg" /></p>

<p>也可以使用條<code>where</code>條件檢查</p>

<p><img src="http://lighter.tw/images/swift/swift-14.jpg" /></p>

<h2 id="labeled-statements">Labeled Statements(帶標簽的語句)</h2>

<p>這個我覺得蠻有趣的！可以去控制區塊的回圈，直接看code可能比較清楚了</p>

<p><img src="http://lighter.tw/images/swift/swift-15.jpg" /></p>

<h2 id="array">Array(陣列)</h2>

<p>這邊我覺得比較不一樣的是，陣列可以用<code>+=</code>直接在陣列後面加上(也就是串聯起來)，其他都蠻好理解的！</p>

<p><img src="http://lighter.tw/images/swift/swift-16.jpg" /></p>

<p>清空陣列</p>

<p><img src="http://lighter.tw/images/swift/swift-17.jpg" /></p>

<p>重複建立同樣的值，如果要將兩個陣列串聯起來，一樣使用<code>+</code>號就可以，但需注意這兩個陣咧的形態必須都一樣，下列這個範例一個是<code>Int</code>另一個是<code>Double</code>那這樣就不能串聯起來了。</p>

<p><img src="http://lighter.tw/images/swift/swift-18.jpg" /></p>

<h2 id="dictionary">Dictionary(字典)</h2>

<p>定義方式有兩種，如下圖</p>

<p><img src="http://lighter.tw/images/swift/swift-19.jpg" /></p>

<p>字典的操作也很簡單</p>

<p><img src="http://lighter.tw/images/swift/swift-20.jpg" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記] 安裝 Vagrant]]></title>
    <link href="http://lighter.tw/blog/2014/06/27/bi-ji-an-zhuang-vagrant/"/>
    <updated>2014-06-27T22:36:58+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/27/bi-ji-an-zhuang-vagrant</id>
    <content type="html"><![CDATA[<p>安裝環境 OS X 10.9.3</p>

<p>Step 1. 下載 <a href="http://www.vagrantup.com/downloads.html">Vagrant</a></p>

<p>Step 2. 下載OS</p>

<p>開啟終端機，建立好一個<code>vagrant</code>的資料夾</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mkdir vagrant
</span><span class="line">$ cd vagrant</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://www.vagrantbox.es/">Vagrantbox</a>，這邊有很多已經裝好的box，你可以自己找行你需要的。</p>

<p>這邊我安裝的是<code>Ubuntu precise 64 VirtualBox</code>，他的網址是<code>http://files.vagrantup.com/precise64.box</code>。接著在終端機輸入下面的指令安裝</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant box add Ubuntu64 http://files.vagrantup.com/precise64.box</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>安裝完畢後，需將這個虛擬機初始化並且啟動</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant box init Ubuntu64
</span><span class="line">$ vagrant up #啟動</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>啟動完成後，需要連線到這台虛擬機</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant ssh</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="vagrant-">Vagrant 指令</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ vagrant halt #關閉
</span><span class="line">$ vagrant reload #重啟
</span><span class="line">$ vagrant status #狀態
</span><span class="line">$ vagrant destroy #刪除
</span><span class="line">$ vagrant list #列出虛擬機</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section">參考資料</h3>

<ul>
  <li><a href="http://www.vagrantup.com/">Vagrant</a></li>
  <li><a href="http://vinn.logdown.com/posts/2014/05/22/note-use-of-vagrant-deployment">[Note] 使用 Vagrant進行部署練習</a></li>
  <li><a href="http://www.vagrantbox.es/">Vagrantbox.es</a></li>
  <li><a href="http://eva0919.github.io/2013/04/26/%E7%94%A8vm%E6%89%8D%E6%98%AF%E5%A5%BD%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%AB-vagrant%E7%AF%87%E5%85%A5%E9%96%80%E7%89%88/">用VM才是好的工程師-vagrant篇(入門版)</a></li>
  <li><a href="http://gogojimmy.net/2013/05/26/vagrant-tutorial/">[教學]使用Vagrant練習環境佈署</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel part 8]]></title>
    <link href="http://lighter.tw/blog/2014/06/21/laravel-part-8/"/>
    <updated>2014-06-21T22:37:03+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/21/laravel-part-8</id>
    <content type="html"><![CDATA[<p>這章節只是想做個整理，這些只是我根據官方文件還有一些影片自己實做，然後加以整理大概記錄一下，主要是釐清一些過程使用，所以幾乎都不會詳細的描述。如果有問題歡迎一起討論。</p>

<p>目前使用比較多的還是codeigniter，相較之下laravel的debug比ci界面好看多了，還有<code>artisan</code>也真的蠻好用的。<code>Eloquent</code>真的是很好用，但是我不太確定當複雜的sql查詢時，很多大量的子查詢，還有個家sql提供的內件方法也都不一樣時，是否也可寫的這麼容易?就我目前工作上使用ci，我都是自己寫sql使用bind的方式，至於為什麼要用bind，似乎也是oracle的重複查詢時速度會比較快(因為cache)，有時間再來查查資料吧。</p>

<p>整個完整的code我也放在GIT上供大家參考囉<a href="https://github.com/lighter/Laravel_sample">[Laravel GIT]</a></p>

<ol>
  <li><a href="http://lighter.tw/blog/2014/05/29/laravel-part-1/">Laravel part 1</a> - 安裝 <code>Laravel</code></li>
  <li><a href="http://lighter.tw/blog/2014/05/30/laravel-part-2/">Laravel part 2</a> - 安裝<code>jquery</code>、<code>bootstrap</code></li>
  <li><a href="http://lighter.tw/blog/2014/05/31/laravel-part-3/">Laravel part 3</a> - 建立資料庫</li>
  <li><a href="http://lighter.tw/blog/2014/06/02/laravel-part-4/">Laravel part 4</a> - 登入 &amp; 簡易Session操作</li>
  <li><a href="http://lighter.tw/blog/2014/06/04/laravel-part-5/">Laravel part 5</a> - 簡單的樣板使用</li>
  <li><a href="http://lighter.tw/blog/2014/06/07/laravel-part-6/">Laravel part 6</a> - 帳號建立 &amp; 列表</li>
  <li><a href="http://lighter.tw/blog/2014/06/09/laravel-part-7/">Laravel part 7</a> - 帳號修改 &amp; 顯示帳號資訊 &amp; 修改帳號 &amp; 刪除帳號</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 7]]></title>
    <link href="http://lighter.tw/blog/2014/06/09/laravel-part-7/"/>
    <updated>2014-06-09T00:02:13+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/09/laravel-part-7</id>
    <content type="html"><![CDATA[<p>這也是最後一個章節了，將會介紹到</p>

<ol>
  <li>顯示帳號資訊</li>
  <li>修改帳號資訊</li>
  <li>刪除帳號</li>
</ol>

<!-- more -->

<h2 id="section">顯示帳號資訊</h2>

<p>開啓<code>AccountController.php</code>，找到<code>show</code>這個方法，修改的code如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AccountController.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="php"><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nv">$account</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class="line">    <span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;account.show&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span><span class="s1">&#39;account&#39;</span><span class="p">,</span> <span class="nv">$account</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這邊要搜尋帳號也很簡單，使用<code>User::find($id)</code>就可以根據<code>ID</code>找到對應的帳號資料，也不用特地去寫些sql語法，但這應該只單存這種簡單的情況下使用吧！如果有多個Table要Join，或是有些特殊的欄位條件要篩選應該就沒這容易了。</p>

<p>最後將這個搜尋結果塞到<code>view</code>裡面使用，所以接下來就是編輯view的部分；開啓<code>app/views/account/show.blade.php</code>，輸入的code如下</p>

<div><script src="https://gist.github.com/941fbf8d6296043346f6.js?file=show.blade.php"></script>
<noscript><pre><code>@extends('layouts.base')

@section('content')
  &lt;h1&gt;Show Account&lt;/h1&gt;
  {{ Form::open(['class' =&gt; 'form-horizontal', 'role' =&gt; 'form']) }}
    &lt;div class=&quot;form-group&quot;&gt;
      &lt;label class=&quot;col-sm-2 control-label&quot; for=&quot;inputEmail3&quot;&gt;Email&lt;/label&gt;
      &lt;div class=&quot;col-sm-10&quot;&gt;
        &lt;input id=&quot;inputEmail3&quot; class=&quot;form-control&quot; type=&quot;email&quot; value=&quot;{{ $account-&gt;email }}&quot; disabled&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
      &lt;label class=&quot;col-sm-2 control-label&quot; for=&quot;inputUsername&quot;&gt;Username&lt;/label&gt;
      &lt;div class=&quot;col-sm-10&quot;&gt;
        &lt;input id=&quot;inputUsername&quot; class=&quot;form-control&quot; type=&quot;text&quot; value=&quot;{{ $account-&gt;username }}&quot; disabled&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
      &lt;label class=&quot;col-sm-2 control-label&quot; for=&quot;inputname&quot;&gt;name&lt;/label&gt;
      &lt;div class=&quot;col-sm-10&quot;&gt;
        &lt;input id=&quot;inputname&quot; class=&quot;form-control&quot; type=&quot;text&quot; value=&quot;{{ $account-&gt;name }}&quot; disabled&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  {{ Form::close() }}
@stop</code></pre></noscript></div>

<p>這邊很簡單你要顯示的欄位資料就使用<code>-&gt;</code>這樣的方式操作，example: <code>$account-&gt;email</code></p>

<h2 id="section-1">修改帳號資訊</h2>

<p>編輯會呼叫到<code>AccountController.php</code>的<code>edit</code>方法，code如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AccountController.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="php"><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">edit</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nv">$account</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;account.edit&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span><span class="s1">&#39;account&#39;</span><span class="p">,</span> <span class="nv">$account</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這邊跟顯示的地方並沒有什麼不同！接著就來看<code>app/views/account/edit.blade.php</code>吧</p>

<div><script src="https://gist.github.com/f5984711c8d1a80d48fe.js?file=edit.blade.php"></script>
<noscript><pre><code>@extends('layouts.base')

@section('content')
  &lt;h1&gt;Edit Account&lt;/h1&gt;
  {{ HTML::ul($errors-&gt;all()) }}
  &lt;!-- 1 --&gt;
  {{ Form::model($account, array('route' =&gt; array('account.update', $account-&gt;id), 'method' =&gt; 'PUT', 'class' =&gt; 'form-horizontal', 'role' =&gt; 'form')) }}
    &lt;div class=&quot;form-group&quot;&gt;
      {{ Form::label('email', 'Email', ['class' =&gt; 'col-sm-2 control-label']) }}
      &lt;div class=&quot;col-sm-10&quot;&gt;
        {{ Form::text('email', $account-&gt;email, ['class' =&gt; 'form-control']) }}
      &lt;/div&gt;
    &lt;/div&gt;
     &lt;div class=&quot;form-group&quot;&gt;
      {{ Form::label('username', 'Username', ['class' =&gt; 'col-sm-2 control-label']) }}
      &lt;div class=&quot;col-sm-10&quot;&gt;
        {{ Form::text('username', $account-&gt;username, ['class' =&gt; 'form-control']) }}
      &lt;/div&gt;
    &lt;/div&gt;
     &lt;div class=&quot;form-group&quot;&gt;
      {{ Form::label('name', 'Name', ['class' =&gt; 'col-sm-2 control-label']) }}
      &lt;div class=&quot;col-sm-10&quot;&gt;
        {{ Form::text('name', $account-&gt;name, ['class' =&gt; 'form-control']) }}
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
      &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;
        {{ Form::submit('Edit the Account!', array('class' =&gt; 'btn btn-primary')) }}
      &lt;/div&gt;
    &lt;/div&gt;

  {{ Form::close() }}
@stop</code></pre></noscript></div>

<p>這邊大致上跟新增很像！唯一比較不一樣的是&#8220;(可以看到註解1的地方)，這邊要指定更新的方法，<code>account.update</code>就是呼叫<code>AccountController</code>的<code>update</code>方法，並帶入<code>$account-&gt;id</code>帳號ID；還有設定<code>'method' =&gt; 'PUT'</code>，這是因為要符合<code>restful</code>。</p>

<p>接下來就來寫更新資料的<code>update</code>方法吧！code如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AccountController.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="php"><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">update</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nv">$rules</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class="line">      <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;required|email&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;required&#39;</span><span class="p">,</span>
</span><span class="line">      <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;required&#39;</span>
</span><span class="line">    <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="nv">$validator</span> <span class="o">=</span>  <span class="nx">Validator</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">all</span><span class="p">(),</span> <span class="nv">$rules</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">fails</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;account/&#39;</span> <span class="o">.</span> <span class="nv">$id</span> <span class="o">.</span> <span class="s1">&#39;/edit&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="o">-&gt;</span><span class="na">withErrors</span><span class="p">(</span><span class="nv">$validator</span><span class="p">)</span>
</span><span class="line">        <span class="o">-&gt;</span><span class="na">withInput</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">all</span><span class="p">());</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="nv">$account</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class="line">      <span class="nv">$account</span><span class="o">-&gt;</span><span class="na">email</span> <span class="o">=</span> <span class="nx">Input</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="nv">$account</span><span class="o">-&gt;</span><span class="na">username</span> <span class="o">=</span> <span class="nx">Input</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="nv">$account</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nx">Input</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="nv">$account</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">      <span class="nx">Session</span><span class="o">::</span><span class="na">flash</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="s1">&#39;修改成功&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;account&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這邊幾乎都跟建立資料時一樣，我就不再贅述了。</p>

<h2 id="section-2">刪除帳號</h2>

<p>前一個章節已經建立好了刪除的連結，但是尚未在controller內寫方法，其實也很簡單，刪除預設會去呼叫<code>destroy</code>這個方法，所以找到<code>AccountController.php</code>內的<code>destroy</code>，code如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AccountController.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="php"><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">destroy</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nv">$account</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="nv">$id</span><span class="p">);</span>
</span><span class="line">    <span class="nv">$account</span><span class="o">-&gt;</span><span class="na">delete</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">    <span class="nx">Session</span><span class="o">::</span><span class="na">flash</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="s1">&#39;刪除成功&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;account&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>直接看code就可以理解！找到該筆帳號(根據ID)，最後<code>delete</code>！很簡單吧…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 6]]></title>
    <link href="http://lighter.tw/blog/2014/06/07/laravel-part-6/"/>
    <updated>2014-06-07T00:58:18+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/07/laravel-part-6</id>
    <content type="html"><![CDATA[<p>這個章節就來介紹</p>

<ol>
  <li>帳號列表</li>
  <li>建立帳號</li>
</ol>

<p>這裡會介紹到如何<code>select</code>跟<code>insert</code>資料,以及<code>URL</code>的使用!</p>

<!-- more -->

<h2 id="section">帳號列表</h2>

<p>首先開啟<code>AccountController.php</code>,輸入以下的code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AccountController.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="php"><span class="line">  <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class="line">  <span class="p">{</span>
</span><span class="line">    <span class="nv">$accounts</span> <span class="o">=</span> <span class="nx">User</span><span class="o">::</span><span class="na">all</span><span class="p">();</span>
</span><span class="line">    <span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;account.list&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="o">-&gt;</span><span class="na">with</span><span class="p">(</span><span class="s1">&#39;accounts&#39;</span><span class="p">,</span> <span class="nv">$accounts</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這裡可以看到撈取資料非常簡單!這裡使用的是<a href="http://kejyun.github.io/Laravel-4-Documentation-Traditional-Chinese/docs/eloquent/#introduction">Eloquent ORM</a>的方式,相關介紹官方文件已經說得很清楚了,這邊就不再多贅述了.</p>

<ol>
  <li>簡單的一行<code>User::all()</code>,比起以前自己要寫好<code>sql</code>語法,然後再使用<code>db</code>方法去query,相對之下這少了很多行code,但是我想…複雜的sql語法可能還是要自己寫;跟codeigniter相較之下我覺得這個更簡潔了…</li>
  <li>帶入查詢結果到<code>view</code>,有寫過codeigniter應該都不陌生..跟<code>$this-&gt;load-&gt;view('view', $data)</code>很相像.</li>
</ol>

<p>只是我覺得有點怪的是,這樣似乎資料就不再Model了,似乎已經在Controller就可以做掉這些,在codeigniter都會把這些sql的東西寫到特定的Model檔案,然後Controller去load這些Model,至於深入原因有時間再找找看資料好了.</p>

<p>Note:如果你的code有錯誤,在網頁出現到下圖的錯誤訊息,但卻沒有顯示code的錯誤問題在哪</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-16.jpg" /></p>

<p>可以開啟<code>app/config/app.php</code>這支檔案,找到<code>debug</code>這個key值,並把它改為<code>true</code>,這樣就可以顯示錯誤訊息了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="s1">&#39;debug&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這邊可以很明確的看到<code>$accounts = User:all();</code>少一個分號!</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-17.jpg" /></p>

<p>再來開啟<code>app/views/account/list.blade.php</code>輸入下面的code:</p>

<div><script src="https://gist.github.com/5abb468d5c547c1305e7.js?file=list.blade.php"></script>
<noscript><pre><code>@extends('layouts.base')

@section('content')
  &lt;h1&gt;List Account&lt;/h1&gt;
  &lt;!-- 1 --&gt;
  @if (Session::has('message'))
    &lt;div class=&quot;alert alert-info&quot;&gt;{{Session::get('message')}}&lt;/div&gt;
  @endif

  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-6 col-md-offset-3&quot; style=&quot;text-align: left;&quot;&gt;
      &lt;!-- 2 --&gt;
      &lt;a class=&quot;btn btn-primary&quot; href=&quot;{{ URL::to('account/create') }}&quot;&gt;Create Account&lt;/a&gt;
      &lt;hr&gt;
      &lt;table class=&quot;table table-striped table-bordered&quot;&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;td&gt;ID&lt;/td&gt;
            &lt;td&gt;Email&lt;/td&gt;
            &lt;td&gt;Actions&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
        &lt;!-- 3 --&gt;
        @foreach($accounts as $key =&gt; $value)
          &lt;tr&gt;
            &lt;td&gt;{{ $key + 1 }}&lt;/td&gt;
            &lt;td&gt;{{ $value-&gt;email }}&lt;/td&gt;
            &lt;td&gt;
              &lt;!-- 4 --&gt;
              &lt;a href=&quot;{{ URL::to('account/' . $value-&gt;id) }}&quot; class=&quot;btn btn-success&quot;&gt;Show&lt;/a&gt;
              &lt;a href=&quot;{{ URL::to('account/' . $value-&gt;id . '/edit') }}&quot; class=&quot;btn btn-info&quot;&gt;Edit&lt;/a&gt;
              {{ Form::open(array('url' =&gt; 'account/' . $value-&gt;id, 'class' =&gt; 'pull-right')) }}
                {{ Form::hidden('_method', 'DELETE') }}
                {{ Form::submit('Delete', array('class' =&gt; 'btn btn-danger')) }}
              {{ Form::close() }}
            &lt;/td&gt;
          &lt;/tr&gt;
        @endforeach
        &lt;/tbody&gt;
    &lt;/div&gt;
  &lt;/div&gt;
@stop</code></pre></noscript></div>

<blockquote>
  <p>下面數字列表請依照code上的註解數字.</p>
</blockquote>

<ol>
  <li>用來顯示<code>session</code>的訊息, 例如建立帳號時回到這頁要顯示建立成功的字樣,這在之後會用到.</li>
  <li>這裡使用’URL`來建立連結, 前面網頁漏漏長的http也不用你寫了.</li>
  <li>這裡的<code>$accounts</code>跟controller內的key值是相對應的. 因為回傳的是多比陣列並且是依照資料表的column欄位名稱,所以後面都適用<code>$value-&gt;COLUMN_NAME</code>.</li>
  <li>這裡<code>Show</code>跟<code>Edit</code>都很單純用網址的方式就可以, 刪除就比較特別了, 因為Laravel是遵照<code>RESTful</code>, 一般的連結是發出<code>GET request</code>, 無法發出<code>Delete request</code>,所以需要借由<code>form</code>內的<code>button</code>來產生<code>Delete request</code>(參考<a href="http://stackoverflow.com/a/19645142/685060">這篇</a>)</li>
</ol>

<p>如果都沒問題的話應該可以看到下面的畫面</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-18.jpg" /></p>

<h2 id="section-1">建立帳號</h2>

<p>首先先來編輯建立帳號的畫面! 開啟<code>app/views/account/create.blade.php</code>, 輸入下面的code</p>

<div><script src="https://gist.github.com/aa6f3eb91ff6f2e0a03e.js?file=create.blade.php"></script>
<noscript><pre><code>@extends('layouts.base')

@section('content')
  &lt;h1&gt;Create Account&lt;/h1&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-6 col-md-offset-3&quot; style=&quot;text-align: left;&quot;&gt;
      
      // 1
      {{ HTML::ul($errors-&gt;all()) }}
      
      // 2
      {{ Form::open(['url' =&gt; 'account']) }}
      &lt;div class=&quot;form-group&quot;&gt;
        {{ Form::label('name','Name') }}
        
        // 3
        {{ Form::text('name', Input::old('name'), ['class' =&gt; 'form-control']) }}
      &lt;/div&gt;

      &lt;div class=&quot;form-group&quot;&gt;
        {{ Form::label('username','Username') }}
        {{ Form::text('username', Input::old('username'), ['class' =&gt; 'form-control']) }}
      &lt;/div&gt;

      &lt;div class=&quot;form-group&quot;&gt;
        {{ Form::label('email','Email') }}
        {{ Form::text('email', Input::old('email'), ['class' =&gt; 'form-control']) }}
      &lt;/div&gt;

      &lt;div class=&quot;form-group&quot;&gt;
        {{ Form::label('password','Password') }}
        {{ Form::password('password', ['class' =&gt; 'form-control']) }}
      &lt;/div&gt;

      // 4
      {{ Form::submit('Create Account', ['class' =&gt; 'btn btn-primary']) }}

      {{ Form::close() }}
    &lt;/div&gt;
  &lt;/div&gt;
@stop</code></pre></noscript></div>

<p>這邊並沒有什麼太複雜的,大概依照註解的號碼解釋一下</p>

<ol>
  <li>有錯誤訊息時,會使用<code>ul</code>的條列出你輸入的資料哪裡有問題.</li>
  <li>表單要送出的<code>url</code>路徑,可以直接指定<code>controller</code>,無需其他的參數.</li>
  <li>這邊我覺得好用的地方是<code>Input::old()</code>,取回就資料,以往我為了要保留住舊資料,所以就將<code>button</code>寫成<code>ajax</code>的方式送出資料.</li>
  <li>表單的送出按鈕.</li>
</ol>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-19.jpg" /></p>

<p>接下來就是寫入資料庫的動作,開啟<code>app/controller/AccountController.php</code>,因為<code>laravel</code>是使用<code>RESTful</code>,所以預設會使用<code>store</code>這個function. code如下:</p>

<div><script src="https://gist.github.com/d28b28c4c16ccd04c40b.js?file=AccountController.php"></script>
<noscript><pre><code>public function store()
{
  // 1. 
  $rules = array(
    'email' =&gt; 'required|email',
    'password' =&gt; 'required|alphaNum|min:3',
    'name' =&gt; 'required',
    'username' =&gt; 'required'
  );

  $validator = Validator::make(Input::all(), $rules);

  if ($validator-&gt;fails()) {
    return Redirect::to('account/create')
      -&gt;withErrors($validator)
      -&gt;withInput(Input::except('password')); // 2.
  }
  else {
    // 3.
    $account = new User;
    $account-&gt;email = Input::get('email');
    $account-&gt;password = Hash::make(Input::get('password'));
    $account-&gt;name = Input::get('name');
    $account-&gt;username = Input::get('username');
    $account-&gt;save();
  
  // 4.
    Session::flash('message', 'Created success');
    return Redirect::to('account');
  }
}</code></pre></noscript></div>

<ol>
  <li>驗證規則: 我個人覺得很方便,不然以往我都是使用<code>empty</code>等php的function一個一個條件檢查.而且連Email檢查也不用寫正規式檢查,可以看到密碼的部分<code>min:3</code>,最少為3個數字.</li>
  <li>返回舊資料: 這樣在返回建立帳號頁面時,也不會遺漏使用原本輸入的資料,就不用全部重新輸入了!</li>
  <li>建立帳號: 這邊也不用自己寫sql語法,整個很直覺,指定好sql欄位的值,最後<code>save</code>.</li>
  <li>返回建立成功訊息: 使用flash的session,至於在哪顯示?可以在<code>list.blade.php</code>中找到<code>@if (Session::has('message'))</code>這區塊的code,就是用來顯示這邊的<code>message</code>.</li>
</ol>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-20.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 5]]></title>
    <link href="http://lighter.tw/blog/2014/06/04/laravel-part-5/"/>
    <updated>2014-06-04T22:12:39+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/04/laravel-part-5</id>
    <content type="html"><![CDATA[<h2 id="controller">建立新的Controller</h2>

<p>這部分主要是介紹樣板使用，主要是可以避免相同的code一再重複，只是要換掉中間的內容！首先我想要建立一個<code>帳號</code>的新增修改刪除的頁面，所以我先建立一個<code>Controller</code>；一樣使用<code>artisan</code>，開啟終端機輸入下列指令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">php artisan controller:make AccountController</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-14.jpg" /></p>

<!-- more -->

<h2 id="routes">修改Routes</h2>

<p>再來就是加入新的<code>route</code>啦！開啟<code>routes.php</code>，新增的code如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>routes.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="c1">// Account</span>
</span><span class="line"><span class="nx">Route</span><span class="o">::</span><span class="na">resource</span><span class="p">(</span><span class="s1">&#39;account&#39;</span><span class="p">,</span> <span class="s1">&#39;AccountController&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這樣一來就會幫我們建立好對應的<code>RESTFul</code>。</p>

<h2 id="view">建立新的View</h2>

<p>首先我建立一個樣板，這樣大家只要引用他，就可以擁有整個頁面的框架，僅需要各自修改各自的內容即可！</p>

<p>首先我建立的的路徑跟檔案是這樣的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">app
</span><span class="line">  ⌞ views
</span><span class="line">    ⌞ layouts
</span><span class="line">      ⌞ base.blade.php</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下在<code>base.blade.php</code>輸入下面的code</p>

<div><script src="https://gist.github.com/43bda04901e61d152711.js?file=base.blade.php"></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Show&lt;/title&gt;
  {{ HTML::script('public/js/jquery-1.11.0.min.js') }}
  {{ HTML::style('public/bootstrap-3.1.1-dist/css/bootstrap.min.css') }}
  {{ HTML::style('public/bootstrap-3.1.1-dist/css/bootstrap-theme.min.css') }}
  &lt;style&gt;
    body {
      padding-top: 50px;
    }
    .starter-template {
      padding: 40px 15px;
      text-align: center;
    }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div class=&quot;navbar navbar-inverse navbar-fixed-top&quot; role=&quot;navigation&quot;&gt;
    &lt;div class=&quot;container&quot;&gt;

      &lt;div class=&quot;navbar-header&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;
          &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;
          &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
          &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
          &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
        &lt;/button&gt;
        &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;Show&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class=&quot;collapse navbar-collapse&quot;&gt;
        &lt;ul class=&quot;nav navbar-nav&quot;&gt;
          &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#contact&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;{{ URL::to('logout') }}&quot;&gt;Logout&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;&lt;!--/.nav-collapse --&gt;

    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;starter-template&quot; style=&quot;position: relative;&quot;&gt;
      @yield('content')
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>

<p>需特別留意的是第45行，你會更動的內容都跟這有關係！</p>

<p>接著就是建立各自功能的畫面啦！我的檔案結構如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">app
</span><span class="line">  ⌞ views
</span><span class="line">    ⌞ account
</span><span class="line">      ⌞ create.blade.php // 建立
</span><span class="line">      ⌞ edit.blade.php   // 修改
</span><span class="line">      ⌞ list.blade.php   // 列表所有帳號
</span><span class="line">      ⌞ show.blade.php   // 該帳號細部資訊</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接著就各自修改這四個檔案吧，很簡單！先舉一個例，先以<code>list.blade.php</code>為例，code如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>list.blade.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">@</span><span class="k">extends</span><span class="p">(</span><span class="s1">&#39;layouts.base&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="k">List</span> <span class="nx">Account</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class="line"><span class="o">@</span><span class="nx">stop</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li><code>@extends(layouts.base)</code>就是引用原本的頁面基本的架構，這樣一來你就不用再寫一堆html header了。</li>
  <li><code>@section('content')</code>跟剛剛的<code>yield('content')</code>是做相呼應的！因此<code>content</code>可由你自己決定，但最後不要忘記加上<code>@stop</code>了。</li>
</ol>

<h2 id="accountcontroller">修改AccountController</h2>

<p>最後修改<code>AccountController</code>，各自對應的方法要顯示的<code>view</code>，code如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>AccountController.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">AccountController</span> <span class="k">extends</span> <span class="nx">\BaseController</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="sd">/**</span>
</span><span class="line"><span class="sd">     * Display a listing of the resource.</span>
</span><span class="line"><span class="sd">     *</span>
</span><span class="line"><span class="sd">     * @return Response</span>
</span><span class="line"><span class="sd">     */</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;account.list&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="sd">/**</span>
</span><span class="line"><span class="sd">     * Show the form for creating a new resource.</span>
</span><span class="line"><span class="sd">     *</span>
</span><span class="line"><span class="sd">     * @return Response</span>
</span><span class="line"><span class="sd">     */</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;account.create&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="sd">/**</span>
</span><span class="line"><span class="sd">     * Store a newly created resource in storage.</span>
</span><span class="line"><span class="sd">     *</span>
</span><span class="line"><span class="sd">     * @return Response</span>
</span><span class="line"><span class="sd">     */</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">store</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">//</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="sd">/**</span>
</span><span class="line"><span class="sd">     * Display the specified resource.</span>
</span><span class="line"><span class="sd">     *</span>
</span><span class="line"><span class="sd">     * @param  int  $id</span>
</span><span class="line"><span class="sd">     * @return Response</span>
</span><span class="line"><span class="sd">     */</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;account.show&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="sd">/**</span>
</span><span class="line"><span class="sd">     * Show the form for editing the specified resource.</span>
</span><span class="line"><span class="sd">     *</span>
</span><span class="line"><span class="sd">     * @param  int  $id</span>
</span><span class="line"><span class="sd">     * @return Response</span>
</span><span class="line"><span class="sd">     */</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">edit</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;account.edit&#39;</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="sd">/**</span>
</span><span class="line"><span class="sd">     * Update the specified resource in storage.</span>
</span><span class="line"><span class="sd">     *</span>
</span><span class="line"><span class="sd">     * @param  int  $id</span>
</span><span class="line"><span class="sd">     * @return Response</span>
</span><span class="line"><span class="sd">     */</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">update</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">//</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="sd">/**</span>
</span><span class="line"><span class="sd">     * Remove the specified resource from storage.</span>
</span><span class="line"><span class="sd">     *</span>
</span><span class="line"><span class="sd">     * @param  int  $id</span>
</span><span class="line"><span class="sd">     * @return Response</span>
</span><span class="line"><span class="sd">     */</span>
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">destroy</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="c1">//</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以注意到<code>View::make()</code>內都是用<code>account.XXX</code>，<code>account</code>代表的就是<code>account</code>目錄路徑下的各自的檔案。</p>

<p>如果成功的話可以看到這樣的畫面</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-15.jpg" /></p>

<p>功能的話…to be continued</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 4]]></title>
    <link href="http://lighter.tw/blog/2014/06/02/laravel-part-4/"/>
    <updated>2014-06-02T09:16:15+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/02/laravel-part-4</id>
    <content type="html"><![CDATA[<p>這篇會展是簡單的登入檢查、登入的<code>Session</code>建立、登出，這三個；主要是會使用到一些簡單的<code>route</code>、<code>laravel</code>的驗證、<code>Session</code>的建立。廢話不多說，往下看吧。</p>

<p>首先建立一個簡單的<code>view</code>用來查看目前登入狀態，建立的路徑是<code>app/views/show/index.blade.php</code>，我刻意多開了一個<code>show</code>資料夾。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">app
</span><span class="line">  ⌞views
</span><span class="line">    ⌞show
</span><span class="line">      ⌞index.blade.php</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>show/index.blade.php</code>的code如下(這邊可以先忽略變數怎麼來的…往下看你就可以知道了)：</p>

<div><script src="https://gist.github.com/38e234e12e9e98652d5a.js"></script>
<noscript><pre><code>&lt;h1&gt;This is show sample&lt;/h1&gt;
&lt;p&gt;
  Login_status:
  {{ $login_status }}
&lt;/p&gt;</code></pre></noscript></div>

<p>再來就是增加<code>route</code>的設定，開啓<code>routes.php</code>，加入下面的code：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>routes.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="c1">// 登入</span>
</span><span class="line"><span class="nx">Route</span><span class="o">::</span><span class="na">post</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;uses&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;HomeController@doLogin&#39;</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// 登出</span>
</span><span class="line"><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;logout&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;uses&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;HomeController@doLogout&#39;</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// show</span>
</span><span class="line"><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;show&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;uses&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;HomeController@show&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這邊我都香要使用的方法都寫在<code>HomeController</code>內。因此會依據網址的不同執行<code>HomeController</code>內對應的方法。</p>

<p><code>HomeController.php</code>加入的code如下，解釋我都寫在註解上了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>HomeController.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="c1">// 登入</span>
</span><span class="line"><span class="k">public</span> <span class="k">function</span> <span class="nf">doLogin</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="c1">// 驗證規則</span>
</span><span class="line">  <span class="nv">$rules</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class="line">    <span class="s1">&#39;email&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;required|email&#39;</span><span class="p">,</span> <span class="c1">// 必填欄位，email格式</span>
</span><span class="line">    <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;required|alphaNum|min:3&#39;</span> <span class="c1">// 必填欄位，必須是字母或數字，不得小於3位</span>
</span><span class="line">  <span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 驗證</span>
</span><span class="line">  <span class="nv">$validator</span> <span class="o">=</span> <span class="nx">Validator</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">all</span><span class="p">(),</span> <span class="nv">$rules</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 規則驗證失敗</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span><span class="nv">$validator</span><span class="o">-&gt;</span><span class="na">fails</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 回到首頁，並回傳錯誤訊息，與所有輸入的欄位，除了密碼</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="o">-&gt;</span><span class="na">withErrors</span><span class="p">(</span><span class="nv">$validator</span><span class="p">)</span>
</span><span class="line">      <span class="o">-&gt;</span><span class="na">withInput</span><span class="p">(</span><span class="nx">Input</span><span class="o">::</span><span class="na">except</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">));</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="nv">$userdata</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class="line">        <span class="s1">&#39;email&#39;</span>    <span class="o">=&gt;</span> <span class="nx">Input</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">),</span>
</span><span class="line">        <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="nx">Input</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">)</span>
</span><span class="line">      <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// 與資料庫驗證</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">Auth</span><span class="o">::</span><span class="na">attempt</span><span class="p">(</span><span class="nv">$userdata</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// 驗證成功，並增加一個session key value值</span>
</span><span class="line">      <span class="nx">Session</span><span class="o">::</span><span class="na">put</span><span class="p">(</span><span class="s1">&#39;login_success&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// 導向show/index.blade.php</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;/show&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">public</span> <span class="k">function</span> <span class="nf">doLogout</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="nx">Auth</span><span class="o">::</span><span class="na">logout</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 刪除登入成功的key 值</span>
</span><span class="line">  <span class="nx">Session</span><span class="o">::</span><span class="na">forget</span><span class="p">(</span><span class="s1">&#39;login_seuccess&#39;</span><span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="nx">Redirect</span><span class="o">::</span><span class="na">to</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="c1">// 取得所有session的資料</span>
</span><span class="line">  <span class="nv">$all_session_data</span> <span class="o">=</span> <span class="nx">Session</span><span class="o">::</span><span class="na">all</span><span class="p">();</span>
</span><span class="line">  <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;all_session_data&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$all_session_data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="nx">Session</span><span class="o">::</span><span class="na">has</span><span class="p">(</span><span class="s1">&#39;login_success&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">Auth</span><span class="o">::</span><span class="na">check</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;login_status&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;success&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;login_status&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;failure&#39;</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// 這邊可以注意$data的login_status這個key值</span>
</span><span class="line">  <span class="c1">// 跟 show/index.blade.php 使用的變數做對應</span>
</span><span class="line">  <span class="nv">$view</span> <span class="o">=</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;show.index&#39;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="nv">$view</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果登入成功的話，可以看到登入成功的訊息</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-13.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 3]]></title>
    <link href="http://lighter.tw/blog/2014/05/31/laravel-part-3/"/>
    <updated>2014-05-31T17:18:37+08:00</updated>
    <id>http://lighter.tw/blog/2014/05/31/laravel-part-3</id>
    <content type="html"><![CDATA[<p>接著就是建立資料方面的事情啦！登入總要有先有資料對吧！</p>

<h2 id="step-1-mysql">Step 1. Mysql設定</h2>

<p>開啓<code>phpmyadmin</code>，建立一個新的Database，這邊取名為<code>laravel_sample</code>，如下圖</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-6.jpg" /></p>

<p>再來就是設定<code>laravel</code>的資料庫連線，開啓<code>database.php</code>，找到<code>mysql</code>的設定，輸入<code>database</code>名稱還有連線的帳號密碼</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>database.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="s1">&#39;mysql&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class="line">	<span class="s1">&#39;driver&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="s1">&#39;host&#39;</span>      <span class="o">=&gt;</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="s1">&#39;database&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;laravel_sample&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="s1">&#39;username&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="s1">&#39;password&#39;</span>  <span class="o">=&gt;</span> <span class="s1">&#39;password&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="s1">&#39;charset&#39;</span>   <span class="o">=&gt;</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="s1">&#39;collation&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf8_unicode_ci&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="s1">&#39;prefix&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class="line"><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-2-table">Step 2. 建立Table</h2>

<p><code>laravel</code>的<code>artisan</code>很方便，這邊你不需要自己在<code>phpmyadmin</code>手動一個一個輸入column name和type，也不用自己寫mysql的create，可以透過指令和一些code來幫你完成建立Table。</p>

<p>開啟終端機，切換到專案的路徑下，以我的環境來說，我的的專案是在<code>/Application/XAMPP/htdocs/laravel_sample/</code>；然後輸入下面的指令：</p>

<p><code>php artisan migrate:make create-users-table</code></p>

<p>實際上會幫你建立一個 <code>時間</code> 加上 <code>create-users-table</code>的一個檔案，如下圖：</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-7.jpg" /></p>

<p>接著開啟這個檔案，這個檔案的路徑會在<code>app/database/migrations/</code>下</p>

<p>在這檔案會看到兩個method，一個是用來建立，另一個當然就是拿來還原的囉！建立的程式主要就是用來建立Table，直接看code吧，如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/**
</span><span class="line"> * Run the migrations.
</span><span class="line"> *
</span><span class="line"> * @return void
</span><span class="line"> */
</span><span class="line">public function up()
</span><span class="line">{
</span><span class="line">	Schema::create('users', function(Blueprint $table)
</span><span class="line">	{
</span><span class="line">		$table-&gt;increments('id');
</span><span class="line">		$table-&gt;string('name', 32);
</span><span class="line">		$table-&gt;string('username', 32);
</span><span class="line">		$table-&gt;string('email', 320);
</span><span class="line">		$table-&gt;string('password', 64);
</span><span class="line">		$table-&gt;timestamps();
</span><span class="line">	});
</span><span class="line">}
</span><span class="line">
</span><span class="line">/**
</span><span class="line"> * Reverse the migrations.
</span><span class="line"> *
</span><span class="line"> * @return void
</span><span class="line"> */
</span><span class="line">public function down()
</span><span class="line">{
</span><span class="line">	Schema::drop('users');
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再次回到終端機，輸入下面的指令來建立Table</p>

<p><code>php artisan migrate</code></p>

<p>阿…發生錯誤了！</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-8.jpg" /></p>

<p>似乎是無法跟mysql連線，請試著修改<code>database.php</code>的<code>host</code>，修改為<code>127.0.0.1</code>，或者你可以參考這篇<a href="http://stackoverflow.com/questions/14219692/laravel-setup-of-migrations-using-artisan-is-failing">Laravel setup of migrations using Artisan is failing</a>，直接指定<code>unix_socket</code>的路徑，因為我有在遠端安裝的時候遇過這情形。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>database.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="s1">&#39;mysql&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class="line">	<span class="s1">&#39;driver&#39;</span>    <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class="line">	<span class="s1">&#39;host&#39;</span>      <span class="o">=&gt;</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改完再執行一次吧！</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-9.jpg" /></p>

<p>成功囉~</p>

<p>來看看<code>phpmyadmin</code>是不是真的出現<code>users</code>的Table呢！？</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-10.jpg" /></p>

<h2 id="step-3-">Step 3. 建立資料</h2>

<p>建立資料的部分也不用你自己到資料庫裡面一筆一筆key，一樣可以透過<code>artisan</code>幫你完成，但你要先寫好code！在<code>app/database/seeds/</code>下建立一個<code>UsersTableSeeder.php</code>(注意：<code>U</code>要大寫)。建立完成後先不急著開起它來編輯，先看到<code>DatabaseSeeder.php</code>這隻檔案，預設執行時來執行這隻檔案，再由這隻檔案的內容去看你要執行哪隻檔案…直接看code吧！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>DatabaseSeeder.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="nx">Eloquent</span><span class="o">::</span><span class="na">unguard</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">	<span class="nv">$this</span><span class="o">-&gt;</span><span class="na">call</span><span class="p">(</span><span class="s1">&#39;UsersTableSeeder&#39;</span><span class="p">);</span> <span class="c1">// 拿掉原本的註解，注意這邊預設User後是沒有加`s`的記得自己補上，跟檔案名稱對應</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下來就是編輯你要寫的內容了，開啟<code>UsersTableSeeder.php</code>，code如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>UsersTableSeeder.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">UsersTableSeeder</span> <span class="k">extends</span> <span class="nx">Seeder</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">delete</span><span class="p">();</span> <span class="c1">// 每次執行都先清理資料表單</span>
</span><span class="line">        <span class="nx">User</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class="line">            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;lighter&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;awesome&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;test@gmail.com&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="nx">Hash</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;awesome&#39;</span><span class="p">),</span>
</span><span class="line">        <span class="p">));</span>
</span><span class="line">
</span><span class="line">        <span class="nx">User</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class="line">            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tom&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;test2@gmail.com&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="nx">Hash</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;awesome&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="p">));</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>完成之後到終端機輸入下面的指令</p>

<p><code>php artisan db:seed</code></p>

<p>成功囉～這樣以後如果需要很多測試資料，就不用手動一筆一筆操作建立了！而且轉換資料庫也方便很多，不用寫多套SQL語法。</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-11.jpg" /></p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-12.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 2]]></title>
    <link href="http://lighter.tw/blog/2014/05/30/laravel-part-2/"/>
    <updated>2014-05-30T23:16:00+08:00</updated>
    <id>http://lighter.tw/blog/2014/05/30/laravel-part-2</id>
    <content type="html"><![CDATA[<p>第二部分就是套用<a href="http://getbootstrap.com/">bootstrap</a>和<a href="http://jquery.com/">jquery</a>，我將檔案放到專案根目錄下的<code>public</code>資料夾內。或者你想引用CDN的也可以，這樣你就不用下載任何東西。</p>

<blockquote>
  <p>jquery其實應該是用不到，只是習慣都會載入而已，接下來也不會有任何event事件需要寫！</p>
</blockquote>

<p>所以我的檔案結構如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">laravel_sample
</span><span class="line">	⌞app
</span><span class="line">	⌞public
</span><span class="line">		⌞bootstrap-3.1.1-dist
</span><span class="line">		⌞jquery-1.11.1.min.js	</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接著我想把首頁換掉，換成登入的畫面，所以先在<code>app/views</code>下建立一個<code>login.blade.php</code>，至於<code>blade</code>是什麼，請參考<a href="http://laravel.com/docs">laravel</a>的官方文件吧。</p>

<p>然後輸入下面的code：</p>

<div><script src="https://gist.github.com/fac184def5041dd0cdae.js?file=login.blade.php"></script>
<noscript><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Look at me Login&lt;/title&gt;
    {{ HTML::script('public/js/jquery-1.11.0.min.js') }}
    {{ HTML::style('public/bootstrap-3.1.1-dist/css/bootstrap.min.css') }}
    {{ HTML::style('public/bootstrap-3.1.1-dist/css/bootstrap-theme.min.css') }}
  &lt;/head&gt;
  &lt;body&gt;

    &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-2 col-md-offset-5&quot;&gt;
    {{ Form::open(array('url' =&gt; 'login', 'class' =&gt; 'clearfix', 'role' =&gt; 'form' )) }}

      &lt;h1&gt;Login&lt;/h1&gt;

      &lt;p&gt;
        {{ $errors-&gt;first('email') }}
        {{ $errors-&gt;first('password') }}
      &lt;/p&gt;

      &lt;div class=&quot;form-group&quot;&gt;
        &lt;label for=&quot;exampleInputEmail&quot;&gt; {{ Form::label('email', 'Email Address') }} &lt;/label&gt;
        {{ Form::text('email', Input::old('email'), array('placeholder' =&gt; 'awesome@awesome.com', 'class' =&gt; 'form-control', 'id' =&gt; 'exampleInputEamil')) }}
      &lt;/div&gt;

      &lt;div class=&quot;form-group&quot;&gt;
        &lt;label for=&quot;exampleInputPasword&quot;&gt; {{ Form::label('password', 'Password') }} &lt;/label&gt;
        {{ Form::password('password', ['class' =&gt; 'form-control', 'id' =&gt; 'exampleInputPassword'])  }}
      &lt;/div&gt;

      &lt;p&gt;
        {{ Form::submit('Submit!', ['class' =&gt; 'btn btn-default'])  }}
      &lt;/p&gt;

    {{ Form::close() }}

    &lt;a href=&quot;{{ URL::to('logout') }}&quot;&gt;Logout&lt;/a&gt;
    &lt;/div&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>

<p>接著修改<code>routes.php</code>，把預設首頁換成<code>login</code>，code如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>routes.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">	<span class="k">return</span> <span class="nx">View</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="s1">&#39;login&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重新整理網頁，就可以看到登入的畫面啦！</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-5.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 1]]></title>
    <link href="http://lighter.tw/blog/2014/05/29/laravel-part-1/"/>
    <updated>2014-05-29T13:16:00+08:00</updated>
    <id>http://lighter.tw/blog/2014/05/29/laravel-part-1</id>
    <content type="html"><![CDATA[<h2 id="laravel">安裝 Laravel</h2>

<p>要在自己的電腦上先安裝<a href="https://getcomposer.org/">composer</a>。</p>

<p>然後在終端機下這樣的指令</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">composer create-project laravel/laravel ProjectName</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>安裝完成後開啟網頁輸入網址 <code>http://localhost/laravel_sample/</code>，你會看到下面這樣的畫面</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-1.jpg" /></p>

<p>預設應該是在<code>public</code>資料夾下，所以改成這個路徑<code>http://localhost/laravel_sample/public/index.php</code>，但…還是一樣失敗了   囧rz</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-2.jpg" /></p>

<p>這似乎是<code>storage</code>資料夾權限的問題，所以用終端機切換到<code>app</code>這個路徑就可以看到<code>storage</code>資料夾，然後輸入下面的指令。</p>

<blockquote>
  <p>如果有權限上的問題在前面加個<code>sudo</code></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chmod -R 777 storage</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再次重整網頁！成功啦！</p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-3.jpg" /></p>

<p>接著我想把public這層路徑拔掉，所以把這層資料夾的<code>.htaccess</code>, <code>index.php</code>, <code>favicon.ico</code>這三個主要的檔案搬到外面，接著開啟<code>index.php</code>做些小修整，主要是修改兩個路徑而已，程式碼如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="php"><span class="line">
</span><span class="line"><span class="k">require</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/bootstrap/autoload.php&#39;</span><span class="p">;</span>
</span><span class="line"><span class="nv">$app</span> <span class="o">=</span> <span class="k">require_once</span> <span class="nx">__DIR__</span><span class="o">.</span><span class="s1">&#39;/bootstrap/start.php&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>把路徑修改成 <code>http://localhost/laravel_sample/</code></p>

<p><img src="http://lighter.tw/images/laravel_sample/laravel-4.jpg" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php oracle oci_bind_by_name]]></title>
    <link href="http://lighter.tw/blog/2014/04/29/php-oracle-oci-bind-by-name/"/>
    <updated>2014-04-29T23:35:00+08:00</updated>
    <id>http://lighter.tw/blog/2014/04/29/php-oracle-oci-bind-by-name</id>
    <content type="html"><![CDATA[<p>原本使用<code>Codeigniter</code>的<code>bind</code>很簡單！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$bind = array(':ID' =&gt; 'ABCDE12345');
</span><span class="line">$sql = "SELECT * FROM {$this-&gt;db-&gt;dbprefix('TABLE')} WHERE ID = :ID";
</span><span class="line">$this-&gt;db-&gt;query($sql, $bind);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但今天改用<code>php</code>的方法來<code>bind</code>，使用<code>oci_bind_by_name</code>這方法，但是原本參考<a href="http://us2.php.net/manual/en/function.oci-bind-by-name.php">Document</a>很直覺就是帶參數進去，並沒想太多!</p>

<p>但是發生了500 Error找了很久仔細看發現，其實是第三個參數的問題，在文件中第三個參數是使用Reference的方式，所以並不能使用字串，必須要在外面定義一個變數帶入。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// 錯誤
</span><span class="line">oci_bind_by_name($stid, ":ID", "ABCDE12345");
</span><span class="line">
</span><span class="line">// 正確
</span><span class="line">$id = "ABCDE12345";
</span><span class="line">oci_bind_by_name($stid, ":ID", $id);</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">補充 2014/05/18</h2>

<p>這也是學長發現的問題，在這邊記錄一下！</p>

<p>就是在<code>foreach</code>中使用並不能直接使用<code>$value</code>…看下面的code好了</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">foreach($array as $key =&gt; $value) {
</span><span class="line">    // 這邊的$value都只會抓到最後一個的值
</span><span class="line">    // oci_bind_by_name($stid, ":ID", $value); // 會有問題
</span><span class="line">
</span><span class="line">    // 如果要正確取得每次迴圈的值應該修改成如下
</span><span class="line">    oci_bind_by_name($stid, ":ID", $array[$key]); 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mongodb note]]></title>
    <link href="http://lighter.tw/blog/2014/04/29/mongodb-note/"/>
    <updated>2014-04-29T23:00:00+08:00</updated>
    <id>http://lighter.tw/blog/2014/04/29/mongodb-note</id>
    <content type="html"><![CDATA[<p>記錄一下第一次使用MongoDB發生的蠢問題…</p>

<!-- more -->

<p>使用<code>brew</code>安裝</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ brew install mongodb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>建立<code>dbpath</code>預設的路徑資料夾</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ sudo mkdir -p /data/db</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>執行<code>mongo</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mongo</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>這時發生了無法連線的問題</p>

<p><img src="http://lighter.tw/images/mongodb/mongdb_1.jpg" /></p>

<p>似乎是並沒有啟動<code>mongodb</code>的服務，可以用這個指令看看</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ps -ef | grep [m]ongo</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>啟動<code>mongod</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ mongod --dbpath /data/db --journal</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再開啟一個新的<code>Terminal</code>輸入<code>mongo</code>，就連到了！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[~] $ mongo
</span><span class="line">MongoDB shell version: 2.6.0
</span><span class="line">connecting to: test
</span><span class="line">&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="note"><strong>Note</strong></h2>
<ol>
  <li><code>mongod.conf</code>路徑位置<code>/usr/local/etc/</code></li>
  <li>預設<code>mongod.lock</code>路徑位置<code>/usr/local/var/mongodb</code></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Koding Note]]></title>
    <link href="http://lighter.tw/blog/2014/04/20/koding-note/"/>
    <updated>2014-04-20T09:40:00+08:00</updated>
    <id>http://lighter.tw/blog/2014/04/20/koding-note</id>
    <content type="html"><![CDATA[<p>之前就知道Koding這平台，也申請帳號了一陣子，但一直沒有特別去使用。最近因為想說來玩玩看吧，而且又是免費的，空間也很夠用！以下是自己記錄一下使用上遇到的一些問題，大概記錄一下。</p>

<p>列出已經預先幫你安裝的東西，從下圖就可以看到已經幫我們安裝的<code>phpmyadmin</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; help programs</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://lighter.tw/images/koding/koding-2014-04-20_09-50-47.jpg" /></p>

<p>可以看到你的phpmyadmin url及基本的mysql指令，你可以使用它提供的指令去修改密碼</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; help phpmyadmin</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://lighter.tw/images/koding/koding-2014-04-20_10-00-13.jpg" /></p>

<p>修改mysql密碼</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mysqladmin -u root password YOUR_NEW_PASSWORD</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改mysql root的帳號</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; mysql -u root -p
</span><span class="line">&gt; Enter password:
</span><span class="line">mysql&gt; use mysql;
</span><span class="line">mysql&gt; update user set user='admin' where user='root';
</span><span class="line">mysql&gt; flush privileges;</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<h2 id="laravel">安裝 Laravel</h2>

<p>安裝<code>composer</code>(<a href="https://getcomposer.org/download/">連結</a>)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; cd
</span><span class="line">&gt; cd Web/
</span><span class="line">&gt; curl -sS https://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://lighter.tw/images/koding/koding-2014-04-20_17-31-50.jpg" /></p>

<p>安裝<code>Laravel</code>(<a href="http://laravel.com/docs/quick#installation">連結</a>)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; php composer.phar create-project laravel/laravel your-project-name --prefer-dist</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://lighter.tw/images/koding/koding-2014-04-20_17-38-03.jpg" /></p>

<p>安裝<code>php5-mcrypt</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&gt; sudo apt-get install php5-mcrypt</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://lighter.tw/images/koding/koding-2014-04-20_17-53-27.jpg" /></p>

<p>設定<code>sessions</code>資料夾權限，路徑<code>/home/UserNmae/Web/laravel-sample/app/storage/sessions</code></p>

<p><img src="http://lighter.tw/images/koding/koding-2014-04-20_17-57-42.jpg" /></p>

<p>最後試著在瀏覽器輸入<code>http://YourUserName.kd.io/laravel-sample/public/</code>，就可以看到<code>Laravel</code>的預設網頁。</p>

<p><img src="http://lighter.tw/images/koding/koding-2014-04-20_18-07-17.jpg" /></p>
]]></content>
  </entry>
  
</feed>
