<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Lighter]]></title>
  <link href="http://lighter.tw/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://lighter.tw/"/>
  <updated>2014-09-06T00:25:46+08:00</updated>
  <id>http://lighter.tw/</id>
  <author>
    <name><![CDATA[Willy lighter]]></name>
    <email><![CDATA[apple.xva@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel part 8]]></title>
    <link href="http://lighter.tw/blog/2014/06/21/laravel-part-8/"/>
    <updated>2014-06-21T22:37:03+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/21/laravel-part-8</id>
    <content type="html"><![CDATA[<p>這章節只是想做個整理，這些只是我根據官方文件還有一些影片自己實做，然後加以整理大概記錄一下，主要是釐清一些過程使用，所以幾乎都不會詳細的描述。如果有問題歡迎一起討論。</p>

<p>目前使用比較多的還是codeigniter，相較之下laravel的debug比ci界面好看多了，還有<code>artisan</code>也真的蠻好用的。<code>Eloquent</code>真的是很好用，但是我不太確定當複雜的sql查詢時，很多大量的子查詢，還有個家sql提供的內件方法也都不一樣時，是否也可寫的這麼容易?就我目前工作上使用ci，我都是自己寫sql使用bind的方式，至於為什麼要用bind，似乎也是oracle的重複查詢時速度會比較快(因為cache)，有時間再來查查資料吧。</p>

<p>整個完整的code我也放在GIT上供大家參考囉<a href="https://github.com/lighter/Laravel_sample">[Laravel GIT]</a></p>

<ol>
  <li><a href="http://lighter.tw/blog/2014/05/29/laravel-part-1/">Laravel part 1</a> - 安裝 <code>Laravel</code></li>
  <li><a href="http://lighter.tw/blog/2014/05/30/laravel-part-2/">Laravel part 2</a> - 安裝<code>jquery</code>、<code>bootstrap</code></li>
  <li><a href="http://lighter.tw/blog/2014/05/31/laravel-part-3/">Laravel part 3</a> - 建立資料庫</li>
  <li><a href="http://lighter.tw/blog/2014/06/02/laravel-part-4/">Laravel part 4</a> - 登入 &amp; 簡易Session操作</li>
  <li><a href="http://lighter.tw/blog/2014/06/04/laravel-part-5/">Laravel part 5</a> - 簡單的樣板使用</li>
  <li><a href="http://lighter.tw/blog/2014/06/07/laravel-part-6/">Laravel part 6</a> - 帳號建立 &amp; 列表</li>
  <li><a href="http://lighter.tw/blog/2014/06/09/laravel-part-7/">Laravel part 7</a> - 帳號修改 &amp; 顯示帳號資訊 &amp; 修改帳號 &amp; 刪除帳號</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 7]]></title>
    <link href="http://lighter.tw/blog/2014/06/09/laravel-part-7/"/>
    <updated>2014-06-09T00:02:13+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/09/laravel-part-7</id>
    <content type="html"><![CDATA[<p>這也是最後一個章節了，將會介紹到</p>

<ol>
  <li>顯示帳號資訊</li>
  <li>修改帳號資訊</li>
  <li>刪除帳號</li>
</ol>

<!-- more -->

<h2 id="section">顯示帳號資訊</h2>

<p>開啓<code>AccountController.php</code>，找到<code>show</code>這個方法，修改的code如下</p>

<p>{% codeblock AccountController.php lang:php %}
  public function show($id)
  {
    $account = User::find($id);
    $view = View::make(‘account.show’)
      -&gt;with(‘account’, $account);
    return $view;
  }
{% endcodeblock %}</p>

<p>這邊要搜尋帳號也很簡單，使用<code>User::find($id)</code>就可以根據<code>ID</code>找到對應的帳號資料，也不用特地去寫些sql語法，但這應該只單存這種簡單的情況下使用吧！如果有多個Table要Join，或是有些特殊的欄位條件要篩選應該就沒這容易了。</p>

<p>最後將這個搜尋結果塞到<code>view</code>裡面使用，所以接下來就是編輯view的部分；開啓<code>app/views/account/show.blade.php</code>，輸入的code如下</p>

<p>{% gist 941fbf8d6296043346f6 show.blade.php %}</p>

<p>這邊很簡單你要顯示的欄位資料就使用<code>-&gt;</code>這樣的方式操作，example: <code>$account-&gt;email</code></p>

<h2 id="section-1">修改帳號資訊</h2>

<p>編輯會呼叫到<code>AccountController.php</code>的<code>edit</code>方法，code如下</p>

<p>{% codeblock AccountController.php lang:php %}
  public function edit($id)
  {
    $account = User::find($id);</p>

<pre><code>$view = View::make('account.edit')
  -&gt;with('account', $account);
return $view;   } {% endcodeblock %}
</code></pre>

<p>這邊跟顯示的地方並沒有什麼不同！接著就來看<code>app/views/account/edit.blade.php</code>吧</p>

<p>{% gist f5984711c8d1a80d48fe edit.blade.php %}</p>

<p>這邊大致上跟新增很像！唯一比較不一樣的是<code>{{ Form model }}</code>(可以看到註解1的地方)，這邊要指定更新的方法，<code>account.update</code>就是呼叫<code>AccountController</code>的<code>update</code>方法，並帶入<code>$account-&gt;id</code>帳號ID；還有設定<code>'method' =&gt; 'PUT'</code>，這是因為要符合<code>restful</code>。</p>

<p>接下來就來寫更新資料的<code>update</code>方法吧！code如下</p>

<p>{% codeblock AccountController.php lang:php %}
  public function update($id)
  {
    $rules = array(
      ‘email’ =&gt; ‘required|email’,
      ‘username’ =&gt; ‘required’,
      ‘name’ =&gt; ‘required’
    );</p>

<pre><code>$validator =  Validator::make(Input::all(), $rules);

if($validator-&gt;fails()) {
  return Redirect::to('account/' . $id . '/edit')
    -&gt;withErrors($validator)
    -&gt;withInput(Input::all());
}
else {
  $account = User::find($id);
  $account-&gt;email = Input::get('email');
  $account-&gt;username = Input::get('username');
  $account-&gt;name = Input::get('name');
  $account-&gt;save();

  Session::flash('message', '修改成功');
  return Redirect::to('account');
}   } {% endcodeblock %}
</code></pre>

<p>這邊幾乎都跟建立資料時一樣，我就不再贅述了。</p>

<h2 id="section-2">刪除帳號</h2>

<p>前一個章節已經建立好了刪除的連結，但是尚未在controller內寫方法，其實也很簡單，刪除預設會去呼叫<code>destroy</code>這個方法，所以找到<code>AccountController.php</code>內的<code>destroy</code>，code如下</p>

<p>{% codeblock AccountController.php lang:php %}
  public function destroy($id)
  {
    $account = User::find($id);
    $account-&gt;delete();</p>

<pre><code>Session::flash('message', '刪除成功');
return Redirect::to('account');   }  {% endcodeblock %}
</code></pre>

<p>直接看code就可以理解！找到該筆帳號(根據ID)，最後<code>delete</code>！很簡單吧…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 6]]></title>
    <link href="http://lighter.tw/blog/2014/06/07/laravel-part-6/"/>
    <updated>2014-06-07T00:58:18+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/07/laravel-part-6</id>
    <content type="html"><![CDATA[<p>這個章節就來介紹</p>

<ol>
  <li>帳號列表</li>
  <li>建立帳號</li>
</ol>

<p>這裡會介紹到如何<code>select</code>跟<code>insert</code>資料,以及<code>URL</code>的使用!</p>

<!-- more -->

<h2 id="section">帳號列表</h2>

<p>首先開啟<code>AccountController.php</code>,輸入以下的code:</p>

<p>{% codeblock AccountController.php lang:php %}
  public function index()
  {
    $accounts = User::all();
    $view = View::make(‘account.list’)
      -&gt;with(‘accounts’, $accounts);
    return $view;
  }
{% endcodeblock %}</p>

<p>這裡可以看到撈取資料非常簡單!這裡使用的是<a href="http://kejyun.github.io/Laravel-4-Documentation-Traditional-Chinese/docs/eloquent/#introduction">Eloquent ORM</a>的方式,相關介紹官方文件已經說得很清楚了,這邊就不再多贅述了.</p>

<ol>
  <li>簡單的一行<code>User::all()</code>,比起以前自己要寫好<code>sql</code>語法,然後再使用<code>db</code>方法去query,相對之下這少了很多行code,但是我想…複雜的sql語法可能還是要自己寫;跟codeigniter相較之下我覺得這個更簡潔了…</li>
  <li>帶入查詢結果到<code>view</code>,有寫過codeigniter應該都不陌生..跟<code>$this-&gt;load-&gt;view('view', $data)</code>很相像.</li>
</ol>

<p>只是我覺得有點怪的是,這樣似乎資料就不再Model了,似乎已經在Controller就可以做掉這些,在codeigniter都會把這些sql的東西寫到特定的Model檔案,然後Controller去load這些Model,至於深入原因有時間再找找看資料好了.</p>

<p>Note:如果你的code有錯誤,在網頁出現到下圖的錯誤訊息,但卻沒有顯示code的錯誤問題在哪</p>

<p>{% img /images/laravel_sample/laravel-16.jpg %}</p>

<p>可以開啟<code>app/config/app.php</code>這支檔案,找到<code>debug</code>這個key值,並把它改為<code>true</code>,這樣就可以顯示錯誤訊息了:</p>

<p>{% codeblock app.php lang:php %}
‘debug’ =&gt; true,
{% endcodeblock %}</p>

<p>這邊可以很明確的看到<code>$accounts = User:all();</code>少一個分號!</p>

<p>{% img /images/laravel_sample/laravel-17.jpg %}</p>

<p>再來開啟<code>app/views/account/list.blade.php</code>輸入下面的code:</p>

<p>{% gist 5abb468d5c547c1305e7 list.blade.php %}</p>

<blockquote>
  <p>下面數字列表請依照code上的註解數字.</p>
</blockquote>

<ol>
  <li>用來顯示<code>session</code>的訊息, 例如建立帳號時回到這頁要顯示建立成功的字樣,這在之後會用到.</li>
  <li>這裡使用’URL`來建立連結, 前面網頁漏漏長的http也不用你寫了.</li>
  <li>這裡的<code>$accounts</code>跟controller內的key值是相對應的. 因為回傳的是多比陣列並且是依照資料表的column欄位名稱,所以後面都適用<code>$value-&gt;COLUMN_NAME</code>.</li>
  <li>這裡<code>Show</code>跟<code>Edit</code>都很單純用網址的方式就可以, 刪除就比較特別了, 因為Laravel是遵照<code>RESTful</code>, 一般的連結是發出<code>GET request</code>, 無法發出<code>Delete request</code>,所以需要借由<code>form</code>內的<code>button</code>來產生<code>Delete request</code>(參考<a href="http://stackoverflow.com/a/19645142/685060">這篇</a>)</li>
</ol>

<p>如果都沒問題的話應該可以看到下面的畫面</p>

<p>{% img /images/laravel_sample/laravel-18.jpg %}</p>

<h2 id="section-1">建立帳號</h2>

<p>首先先來編輯建立帳號的畫面! 開啟<code>app/views/account/create.blade.php</code>, 輸入下面的code</p>

<p>{% gist aa6f3eb91ff6f2e0a03e create.blade.php %}</p>

<p>這邊並沒有什麼太複雜的,大概依照註解的號碼解釋一下</p>

<ol>
  <li>有錯誤訊息時,會使用<code>ul</code>的條列出你輸入的資料哪裡有問題.</li>
  <li>表單要送出的<code>url</code>路徑,可以直接指定<code>controller</code>,無需其他的參數.</li>
  <li>這邊我覺得好用的地方是<code>Input::old()</code>,取回就資料,以往我為了要保留住舊資料,所以就將<code>button</code>寫成<code>ajax</code>的方式送出資料.</li>
  <li>表單的送出按鈕.</li>
</ol>

<p>{% img /images/laravel_sample/laravel-19.jpg %}</p>

<p>接下來就是寫入資料庫的動作,開啟<code>app/controller/AccountController.php</code>,因為<code>laravel</code>是使用<code>RESTful</code>,所以預設會使用<code>store</code>這個function. code如下:</p>

<p>{% gist d28b28c4c16ccd04c40b AccountController.php %}</p>

<ol>
  <li>驗證規則: 我個人覺得很方便,不然以往我都是使用<code>empty</code>等php的function一個一個條件檢查.而且連Email檢查也不用寫正規式檢查,可以看到密碼的部分<code>min:3</code>,最少為3個數字.</li>
  <li>返回舊資料: 這樣在返回建立帳號頁面時,也不會遺漏使用原本輸入的資料,就不用全部重新輸入了!</li>
  <li>建立帳號: 這邊也不用自己寫sql語法,整個很直覺,指定好sql欄位的值,最後<code>save</code>.</li>
  <li>返回建立成功訊息: 使用flash的session,至於在哪顯示?可以在<code>list.blade.php</code>中找到<code>@if (Session::has('message'))</code>這區塊的code,就是用來顯示這邊的<code>message</code>.</li>
</ol>

<p>{% img /images/laravel_sample/laravel-20.jpg %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 5]]></title>
    <link href="http://lighter.tw/blog/2014/06/04/laravel-part-5/"/>
    <updated>2014-06-04T22:12:39+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/04/laravel-part-5</id>
    <content type="html"><![CDATA[<h2 id="controller">建立新的Controller</h2>

<p>這部分主要是介紹樣板使用，主要是可以避免相同的code一再重複，只是要換掉中間的內容！首先我想要建立一個<code>帳號</code>的新增修改刪除的頁面，所以我先建立一個<code>Controller</code>；一樣使用<code>artisan</code>，開啟終端機輸入下列指令：</p>

<p>{% codeblock %}
php artisan controller:make AccountController
{% endcodeblock %}</p>

<p>{% img /images/laravel_sample/laravel-14.jpg %}</p>

<!-- more -->

<h2 id="routes">修改Routes</h2>

<p>再來就是加入新的<code>route</code>啦！開啟<code>routes.php</code>，新增的code如下：</p>

<p>{% codeblock routes.php lang:php %}
// Account
Route::resource(‘account’, ‘AccountController’);
{% endcodeblock %}</p>

<p>這樣一來就會幫我們建立好對應的<code>RESTFul</code>。</p>

<h2 id="view">建立新的View</h2>

<p>首先我建立一個樣板，這樣大家只要引用他，就可以擁有整個頁面的框架，僅需要各自修改各自的內容即可！</p>

<p>首先我建立的的路徑跟檔案是這樣的：</p>

<p>{% codeblock %}
app
  ⌞ views
    ⌞ layouts
      ⌞ base.blade.php
{% endcodeblock %}</p>

<p>接下在<code>base.blade.php</code>輸入下面的code</p>

<p>{% gist 43bda04901e61d152711 base.blade.php %}</p>

<p>需特別留意的是第45行，你會更動的內容都跟這有關係！</p>

<p>接著就是建立各自功能的畫面啦！我的檔案結構如下</p>

<p>{% codeblock %}
app
  ⌞ views
    ⌞ account
      ⌞ create.blade.php // 建立
      ⌞ edit.blade.php   // 修改
      ⌞ list.blade.php   // 列表所有帳號
      ⌞ show.blade.php   // 該帳號細部資訊
{% endcodeblock %}</p>

<p>接著就各自修改這四個檔案吧，很簡單！先舉一個例，先以<code>list.blade.php</code>為例，code如下：</p>

<p>{% codeblock list.blade.php lang:php %}
@extends(‘layouts.base’)</p>

<p>@section(‘content’)</p>
<h1>List Account</h1>
<p>@stop
{% endcodeblock %}</p>

<ol>
  <li><code>@extends(layouts.base)</code>就是引用原本的頁面基本的架構，這樣一來你就不用再寫一堆html header了。</li>
  <li><code>@section('content')</code>跟剛剛的<code>yield('content')</code>是做相呼應的！因此<code>content</code>可由你自己決定，但最後不要忘記加上<code>@stop</code>了。</li>
</ol>

<h2 id="accountcontroller">修改AccountController</h2>

<p>最後修改<code>AccountController</code>，各自對應的方法要顯示的<code>view</code>，code如下：</p>

<p>{% codeblock AccountController.php lang:php %}
&lt;?php</p>

<p>class AccountController extends \BaseController {</p>

<pre><code>/**
 * Display a listing of the resource.
 *
 * @return Response
 */
public function index()
{
    $view = View::make('account.list');
    return $view;
}


/**
 * Show the form for creating a new resource.
 *
 * @return Response
 */
public function create()
{
    $view = View::make('account.create');
    return $view;
}


/**
 * Store a newly created resource in storage.
 *
 * @return Response
 */
public function store()
{
    //
}


/**
 * Display the specified resource.
 *
 * @param  int  $id
 * @return Response
 */
public function show($id)
{
    $view = View::make('account.show');
    return $view;
}


/**
 * Show the form for editing the specified resource.
 *
 * @param  int  $id
 * @return Response
 */
public function edit($id)
{
    $view = View::make('account.edit');
    return $view;
}


/**
 * Update the specified resource in storage.
 *
 * @param  int  $id
 * @return Response
 */
public function update($id)
{
    //
}


/**
 * Remove the specified resource from storage.
 *
 * @param  int  $id
 * @return Response
 */
public function destroy($id)
{
    //
} } {% endcodeblock %}
</code></pre>

<p>可以注意到<code>View::make()</code>內都是用<code>account.XXX</code>，<code>account</code>代表的就是<code>account</code>目錄路徑下的各自的檔案。</p>

<p>如果成功的話可以看到這樣的畫面</p>

<p>{% img /images/laravel_sample/laravel-15.jpg %}</p>

<p>功能的話…to be continued</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 4]]></title>
    <link href="http://lighter.tw/blog/2014/06/02/laravel-part-4/"/>
    <updated>2014-06-02T09:16:15+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/02/laravel-part-4</id>
    <content type="html"><![CDATA[<p>這篇會展是簡單的登入檢查、登入的<code>Session</code>建立、登出，這三個；主要是會使用到一些簡單的<code>route</code>、<code>laravel</code>的驗證、<code>Session</code>的建立。廢話不多說，往下看吧。</p>

<p>首先建立一個簡單的<code>view</code>用來查看目前登入狀態，建立的路徑是<code>app/views/show/index.blade.php</code>，我刻意多開了一個<code>show</code>資料夾。</p>

<p>{% codeblock %}
app
  ⌞views
    ⌞show
      ⌞index.blade.php
{% endcodeblock %}</p>

<p><code>show/index.blade.php</code>的code如下(這邊可以先忽略變數怎麼來的…往下看你就可以知道了)：</p>

<p>{% gist 38e234e12e9e98652d5a %}</p>

<p>再來就是增加<code>route</code>的設定，開啓<code>routes.php</code>，加入下面的code：</p>

<p>{% codeblock routes.php lang:php %}
// 登入
Route::post(‘login’, [‘uses’ =&gt; ‘HomeController@doLogin’]);</p>

<p>// 登出
Route::get(‘logout’, [‘uses’ =&gt; ‘HomeController@doLogout’]);</p>

<p>// show
Route::get(‘show’, [‘uses’ =&gt; ‘HomeController@show’]);
{% endcodeblock %}</p>

<p>這邊我都香要使用的方法都寫在<code>HomeController</code>內。因此會依據網址的不同執行<code>HomeController</code>內對應的方法。</p>

<p><code>HomeController.php</code>加入的code如下，解釋我都寫在註解上了。</p>

<p>{% codeblock HomeController.php lang:php %}
// 登入
public function doLogin()
{
  // 驗證規則
  $rules = array(
    ‘email’    =&gt; ‘required|email’, // 必填欄位，email格式
    ‘password’ =&gt; ‘required|alphaNum|min:3’ // 必填欄位，必須是字母或數字，不得小於3位
  );</p>

<p>// 驗證
  $validator = Validator::make(Input::all(), $rules);</p>

<p>// 規則驗證失敗
  if ($validator-&gt;fails()) {</p>

<pre><code>// 回到首頁，並回傳錯誤訊息，與所有輸入的欄位，除了密碼
return Redirect::to('/')
  -&gt;withErrors($validator)
  -&gt;withInput(Input::except('password'));   }   else {
$userdata = array(
    'email'    =&gt; Input::get('email'),
    'password' =&gt; Input::get('password')
  );

// 與資料庫驗證
if (Auth::attempt($userdata)) {

  // 驗證成功，並增加一個session key value值
  Session::put('login_success', 1);

  // 導向show/index.blade.php
  return Redirect::to('/show');
}
else {
  return Redirect::to('/');
}   } }
</code></pre>

<p>public function doLogout()
{
  Auth::logout();</p>

<p>// 刪除登入成功的key 值
  Session::forget(‘login_seuccess’);
  return Redirect::to(‘/’);
}</p>

<p>public function show()
{
  // 取得所有session的資料
  $all_session_data = Session::all();
  $data[‘all_session_data’] = $all_session_data;</p>

<p>if ( Session::has(‘login_success’) &amp;&amp; Auth::check() ) {
    $data[‘login_status’] = ‘success’;
  }
  else {
    $data[‘login_status’] = ‘failure’;
  }</p>

<p>// 這邊可以注意$data的login_status這個key值
  // 跟 show/index.blade.php 使用的變數做對應
  $view = View::make(‘show.index’, $data);
  return $view;
}
{% endcodeblock %}</p>

<p>如果登入成功的話，可以看到登入成功的訊息</p>

<p>{% img /images/laravel_sample/laravel-13.jpg %}</p>
]]></content>
  </entry>
  
</feed>
