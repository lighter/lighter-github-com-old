<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Lighter]]></title>
  <link href="http://lighter.tw/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://lighter.tw/"/>
  <updated>2014-06-04T23:21:09+08:00</updated>
  <id>http://lighter.tw/</id>
  <author>
    <name><![CDATA[Willy lighter]]></name>
    <email><![CDATA[apple.xva@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[laravel part 5]]></title>
    <link href="http://lighter.tw/blog/2014/06/04/laravel-part-5/"/>
    <updated>2014-06-04T22:12:39+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/04/laravel-part-5</id>
    <content type="html"><![CDATA[<h2 id="controller">建立新的Controller</h2>

<p>這部分主要是介紹樣板使用，主要是可以避免相同的code一再重複，只是要換掉中間的內容！首先我想要建立一個<code>帳號</code>的新增修改刪除的頁面，所以我先建立一個<code>Controller</code>；一樣使用<code>artisan</code>，開啟終端機輸入下列指令：</p>

<p>{% codeblock %}
php artisan controller:make AccountController
{% endcodeblock %}</p>

<p>{% img /images/laravel_sample/laravel-14.jpg %}</p>

<!-- more -->

<h2 id="routes">修改Routes</h2>

<p>再來就是加入新的<code>route</code>啦！開啟<code>routes.php</code>，新增的code如下：</p>

<p>{% codeblock routes.php lang:php %}
// Account
Route::resource(‘account’, ‘AccountController’);
{% endcodeblock %}</p>

<p>這樣一來就會幫我們建立好對應的<code>RESTFul</code>。</p>

<h2 id="view">建立新的View</h2>

<p>首先我建立一個樣板，這樣大家只要引用他，就可以擁有整個頁面的框架，僅需要各自修改各自的內容即可！</p>

<p>首先我建立的的路徑跟檔案是這樣的：</p>

<p>{% codeblock %}
app
  ⌞ views
    ⌞ layouts
      ⌞ base.blade.php
{% endcodeblock %}</p>

<p>接下在<code>base.blade.php</code>輸入下面的code</p>

<p>{% gist 43bda04901e61d152711 base.blade.php %}</p>

<p>需特別留意的是第45行，你會更動的內容都跟這有關係！</p>

<p>接著就是建立各自功能的畫面啦！我的檔案結構如下</p>

<p>{% codeblock %}
app
  ⌞ views
    ⌞ account
      ⌞ create.blade.php // 建立
      ⌞ edit.blade.php   // 修改
      ⌞ list.blade.php   // 列表所有帳號
      ⌞ show.blade.php   // 該帳號細部資訊
{% endcodeblock %}</p>

<p>接著就各自修改這四個檔案吧，很簡單！先舉一個例，先以<code>list.blade.php</code>為例，code如下：</p>

<p>{% codeblock list.blade.php lang:php %}
@extends(‘layouts.base’)</p>

<p>@section(‘content’)</p>
<h1>List Account</h1>
<p>@stop
{% endcodeblock %}</p>

<ol>
  <li><code>@extends(layouts.base)</code>就是引用原本的頁面基本的架構，這樣一來你就不用再寫一堆html header了。</li>
  <li><code>@section('content')</code>跟剛剛的<code>yield('content')</code>是做相呼應的！因此<code>content</code>可由你自己決定，但最後不要忘記加上<code>@stop</code>了。</li>
</ol>

<h2 id="accountcontroller">修改AccountController</h2>

<p>最後修改<code>AccountController</code>，各自對應的方法要顯示的<code>view</code>，code如下：</p>

<p>{% codeblock AccountController.php lang:php %}
&lt;?php</p>

<p>class AccountController extends \BaseController {</p>

<pre><code>/**
 * Display a listing of the resource.
 *
 * @return Response
 */
public function index()
{
    $view = View::make('account.list');
    return $view;
}


/**
 * Show the form for creating a new resource.
 *
 * @return Response
 */
public function create()
{
    $view = View::make('account.create');
    return $view;
}


/**
 * Store a newly created resource in storage.
 *
 * @return Response
 */
public function store()
{
    //
}


/**
 * Display the specified resource.
 *
 * @param  int  $id
 * @return Response
 */
public function show($id)
{
    $view = View::make('account.show');
    return $view;
}


/**
 * Show the form for editing the specified resource.
 *
 * @param  int  $id
 * @return Response
 */
public function edit($id)
{
    $view = View::make('account.edit');
    return $view;
}


/**
 * Update the specified resource in storage.
 *
 * @param  int  $id
 * @return Response
 */
public function update($id)
{
    //
}


/**
 * Remove the specified resource from storage.
 *
 * @param  int  $id
 * @return Response
 */
public function destroy($id)
{
    //
} } {% endcodeblock %}
</code></pre>

<p>可以注意到<code>View::make()</code>內都是用<code>account.XXX</code>，<code>account</code>代表的就是<code>account</code>目錄路徑下的各自的檔案。</p>

<p>如果成功的話可以看到這樣的畫面</p>

<p>{% img /images/laravel_sample/laravel-15.jpg %}</p>

<p>功能的話…to be continued</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 4]]></title>
    <link href="http://lighter.tw/blog/2014/06/02/laravel-part-4/"/>
    <updated>2014-06-02T09:16:15+08:00</updated>
    <id>http://lighter.tw/blog/2014/06/02/laravel-part-4</id>
    <content type="html"><![CDATA[<p>這篇會展是簡單的登入檢查、登入的<code>Session</code>建立、登出，這三個；主要是會使用到一些簡單的<code>route</code>、<code>laravel</code>的驗證、<code>Session</code>的建立。廢話不多說，往下看吧。</p>

<p>首先建立一個簡單的<code>view</code>用來查看目前登入狀態，建立的路徑是<code>app/views/show/index.blade.php</code>，我刻意多開了一個<code>show</code>資料夾。</p>

<p>{% codeblock %}
app
  ⌞views
    ⌞show
      ⌞index.blade.php
{% endcodeblock %}</p>

<p><code>show/index.blade.php</code>的code如下(這邊可以先忽略變數怎麼來的…往下看你就可以知道了)：</p>

<p>{% gist 38e234e12e9e98652d5a %}</p>

<p>再來就是增加<code>route</code>的設定，開啓<code>routes.php</code>，加入下面的code：</p>

<p>{% codeblock routes.php lang:php %}
// 登入
Route::post(‘login’, [‘uses’ =&gt; ‘HomeController@doLogin’]);</p>

<p>// 登出
Route::get(‘logout’, [‘uses’ =&gt; ‘HomeController@doLogout’]);</p>

<p>// show
Route::get(‘show’, [‘uses’ =&gt; ‘HomeController@show’]);
{% endcodeblock %}</p>

<p>這邊我都香要使用的方法都寫在<code>HomeController</code>內。因此會依據網址的不同執行<code>HomeController</code>內對應的方法。</p>

<p><code>HomeController.php</code>加入的code如下，解釋我都寫在註解上了。</p>

<p>{% codeblock HomeController.php lang:php %}
// 登入
public function doLogin()
{
  // 驗證規則
  $rules = array(
    ‘email’    =&gt; ‘required|email’, // 必填欄位，email格式
    ‘password’ =&gt; ‘required|alphaNum|min:3’ // 必填欄位，必須是字母或數字，不得小於3位
  );</p>

<p>// 驗證
  $validator = Validator::make(Input::all(), $rules);</p>

<p>// 規則驗證失敗
  if ($validator-&gt;fails()) {</p>

<pre><code>// 回到首頁，並回傳錯誤訊息，與所有輸入的欄位，除了密碼
return Redirect::to('/')
  -&gt;withErrors($validator)
  -&gt;withInput(Input::except('password'));   }   else {
$userdata = array(
    'email'    =&gt; Input::get('email'),
    'password' =&gt; Input::get('password')
  );

// 與資料庫驗證
if (Auth::attempt($userdata)) {

  // 驗證成功，並增加一個session key value值
  Session::put('login_success', 1);

  // 導向show/index.blade.php
  return Redirect::to('/show');
}
else {
  return Redirect::to('/');
}   } }
</code></pre>

<p>public function doLogout()
{
  Auth::logout();</p>

<p>// 刪除登入成功的key 值
  Session::forget(‘login_seuccess’);
  return Redirect::to(‘/’);
}</p>

<p>public function show()
{
  // 取得所有session的資料
  $all_session_data = Session::all();
  $data[‘all_session_data’] = $all_session_data;</p>

<p>if ( Session::has(‘login_success’) &amp;&amp; Auth::check() ) {
    $data[‘login_status’] = ‘success’;
  }
  else {
    $data[‘login_status’] = ‘failure’;
  }</p>

<p>// 這邊可以注意$data的login_status這個key值
  // 跟 show/index.blade.php 使用的變數做對應
  $view = View::make(‘show.index’, $data);
  return $view;
}
{% endcodeblock %}</p>

<p>如果登入成功的話，可以看到登入成功的訊息</p>

<p>{% img /images/laravel_sample/laravel-13.jpg %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 3]]></title>
    <link href="http://lighter.tw/blog/2014/05/31/laravel-part-3/"/>
    <updated>2014-05-31T17:18:37+08:00</updated>
    <id>http://lighter.tw/blog/2014/05/31/laravel-part-3</id>
    <content type="html"><![CDATA[<p>接著就是建立資料方面的事情啦！登入總要有先有資料對吧！</p>

<h2 id="step-1-mysql">Step 1. Mysql設定</h2>

<p>開啓<code>phpmyadmin</code>，建立一個新的Database，這邊取名為<code>laravel_sample</code>，如下圖</p>

<p>{% img /images/laravel_sample/laravel-6.jpg %}</p>

<p>再來就是設定<code>laravel</code>的資料庫連線，開啓<code>database.php</code>，找到<code>mysql</code>的設定，輸入<code>database</code>名稱還有連線的帳號密碼</p>

<p>{% codeblock database.php lang:php %}
‘mysql’ =&gt; array(
	‘driver’    =&gt; ‘mysql’,
	‘host’      =&gt; ‘localhost’,
	‘database’  =&gt; ‘laravel_sample’,
	‘username’  =&gt; ‘root’,
	‘password’  =&gt; ‘password’,
	‘charset’   =&gt; ‘utf8’,
	‘collation’ =&gt; ‘utf8_unicode_ci’,
	‘prefix’    =&gt; ‘’,
),
{% endcodeblock %}</p>

<h2 id="step-2-table">Step 2. 建立Table</h2>

<p><code>laravel</code>的<code>artisan</code>很方便，這邊你不需要自己在<code>phpmyadmin</code>手動一個一個輸入column name和type，也不用自己寫mysql的create，可以透過指令和一些code來幫你完成建立Table。</p>

<p>開啟終端機，切換到專案的路徑下，以我的環境來說，我的的專案是在<code>/Application/XAMPP/htdocs/laravel_sample/</code>；然後輸入下面的指令：</p>

<p><code>php artisan migrate:make create-users-table</code></p>

<p>實際上會幫你建立一個 <code>時間</code> 加上 <code>create-users-table</code>的一個檔案，如下圖：</p>

<p>{% img /images/laravel_sample/laravel-7.jpg %}</p>

<p>接著開啟這個檔案，這個檔案的路徑會在<code>app/database/migrations/</code>下</p>

<p>在這檔案會看到兩個method，一個是用來建立，另一個當然就是拿來還原的囉！建立的程式主要就是用來建立Table，直接看code吧，如下：</p>

<p>{% codeblock %}
/**
 * Run the migrations.
 *
 * @return void
 */
public function up()
{
	Schema::create(‘users’, function(Blueprint $table)
	{
		$table-&gt;increments(‘id’);
		$table-&gt;string(‘name’, 32);
		$table-&gt;string(‘username’, 32);
		$table-&gt;string(‘email’, 320);
		$table-&gt;string(‘password’, 64);
		$table-&gt;timestamps();
	});
}</p>

<p>/**
 * Reverse the migrations.
 *
 * @return void
 */
public function down()
{
	Schema::drop(‘users’);
}
{% endcodeblock %}</p>

<p>再次回到終端機，輸入下面的指令來建立Table</p>

<p><code>php artisan migrate</code></p>

<p>阿…發生錯誤了！</p>

<p>{% img /images/laravel_sample/laravel-8.jpg %}</p>

<p>似乎是無法跟mysql連線，請試著修改<code>database.php</code>的<code>host</code>，修改為<code>127.0.0.1</code>，或者你可以參考這篇<a href="http://stackoverflow.com/questions/14219692/laravel-setup-of-migrations-using-artisan-is-failing">Laravel setup of migrations using Artisan is failing</a>，直接指定<code>unix_socket</code>的路徑，因為我有在遠端安裝的時候遇過這情形。</p>

<p>{% codeblock database.php lang:php %}
‘mysql’ =&gt; array(
	‘driver’    =&gt; ‘mysql’,
	‘host’      =&gt; ‘127.0.0.1’,
{% endcodeblock %}</p>

<p>修改完再執行一次吧！</p>

<p>{% img /images/laravel_sample/laravel-9.jpg %}</p>

<p>成功囉~</p>

<p>來看看<code>phpmyadmin</code>是不是真的出現<code>users</code>的Table呢！？</p>

<p>{% img /images/laravel_sample/laravel-10.jpg %}</p>

<h2 id="step-3-">Step 3. 建立資料</h2>

<p>建立資料的部分也不用你自己到資料庫裡面一筆一筆key，一樣可以透過<code>artisan</code>幫你完成，但你要先寫好code！在<code>app/database/seeds/</code>下建立一個<code>UsersTableSeeder.php</code>(注意：<code>U</code>要大寫)。建立完成後先不急著開起它來編輯，先看到<code>DatabaseSeeder.php</code>這隻檔案，預設執行時來執行這隻檔案，再由這隻檔案的內容去看你要執行哪隻檔案…直接看code吧！</p>

<p>{% codeblock  DatabaseSeeder.php lang:php %}
public function run()
{
	Eloquent::unguard();</p>

<pre><code>$this-&gt;call('UsersTableSeeder'); // 拿掉原本的註解，注意這邊預設User後是沒有加`s`的記得自己補上，跟檔案名稱對應 } {% endcodeblock %}
</code></pre>

<p>接下來就是編輯你要寫的內容了，開啟<code>UsersTableSeeder.php</code>，code如下：</p>

<p>{% codeblock UsersTableSeeder.php lang:php %}
&lt;?php</p>

<p>class UsersTableSeeder extends Seeder
{</p>

<pre><code>public function run()
{
    DB::table('users')-&gt;delete(); // 每次執行都先清理資料表單
    User::create(array(
        'name' =&gt; 'lighter',
        'username' =&gt; 'awesome',
        'email' =&gt; 'test@gmail.com',
        'password' =&gt; Hash::make('awesome'),
    ));

    User::create(array(
        'name' =&gt; 'Tom',
        'username' =&gt; 'John',
        'email' =&gt; 'test2@gmail.com',
        'password' =&gt; Hash::make('awesome')
    ));
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>完成之後到終端機輸入下面的指令</p>

<p><code>php artisan db:seed</code></p>

<p>成功囉～這樣以後如果需要很多測試資料，就不用手動一筆一筆操作建立了！而且轉換資料庫也方便很多，不用寫多套SQL語法。</p>

<p>{% img /images/laravel_sample/laravel-11.jpg %}</p>

<p>{% img /images/laravel_sample/laravel-12.jpg %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 2]]></title>
    <link href="http://lighter.tw/blog/2014/05/30/laravel-part-2/"/>
    <updated>2014-05-30T23:16:00+08:00</updated>
    <id>http://lighter.tw/blog/2014/05/30/laravel-part-2</id>
    <content type="html"><![CDATA[<p>第二部分就是套用<a href="http://getbootstrap.com/">bootstrap</a>和<a href="http://jquery.com/">jquery</a>，我將檔案放到專案根目錄下的<code>public</code>資料夾內。或者你想引用CDN的也可以，這樣你就不用下載任何東西。</p>

<blockquote>
  <p>jquery其實應該是用不到，只是習慣都會載入而已，接下來也不會有任何event事件需要寫！</p>
</blockquote>

<p>所以我的檔案結構如下</p>

<p><code>
laravel_sample
	⌞app
	⌞public
		⌞bootstrap-3.1.1-dist
		⌞jquery-1.11.1.min.js	
</code></p>

<p>接著我想把首頁換掉，換成登入的畫面，所以先在<code>app/views</code>下建立一個<code>login.blade.php</code>，至於<code>blade</code>是什麼，請參考<a href="http://laravel.com/docs">laravel</a>的官方文件吧。</p>

<p>然後輸入下面的code：</p>

<p>{% gist fac184def5041dd0cdae login.blade.php %}</p>

<p>接著修改<code>routes.php</code>，把預設首頁換成<code>login</code>，code如下：</p>

<p>{% codeblock routes.php lang:php %}
Route::get(‘/’, function()
{
	return View::make(‘login’);
});
{% endcodeblock %}</p>

<p>重新整理網頁，就可以看到登入的畫面啦！</p>

<p>{% img /images/laravel_sample/laravel-5.jpg %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel part 1]]></title>
    <link href="http://lighter.tw/blog/2014/05/29/laravel-part-1/"/>
    <updated>2014-05-29T13:16:00+08:00</updated>
    <id>http://lighter.tw/blog/2014/05/29/laravel-part-1</id>
    <content type="html"><![CDATA[<h2 id="laravel">安裝 Laravel</h2>

<p>要在自己的電腦上先安裝<a href="https://getcomposer.org/">composer</a>。</p>

<p>然後在終端機下這樣的指令</p>

<p>{% codeblock %}
composer create-project laravel/laravel ProjectName
{% endcodeblock %}</p>

<p>安裝完成後開啟網頁輸入網址 <code>http://localhost/laravel_sample/</code>，你會看到下面這樣的畫面</p>

<p>{% img /images/laravel_sample/laravel-1.jpg %}</p>

<p>預設應該是在<code>public</code>資料夾下，所以改成這個路徑<code>http://localhost/laravel_sample/public/index.php</code>，但…還是一樣失敗了   囧rz</p>

<p>{% img /images/laravel_sample/laravel-2.jpg %}</p>

<p>這似乎是<code>storage</code>資料夾權限的問題，所以用終端機切換到<code>app</code>這個路徑就可以看到<code>storage</code>資料夾，然後輸入下面的指令。</p>

<blockquote>
  <p>如果有權限上的問題在前面加個<code>sudo</code></p>
</blockquote>

<p>{% codeblock %}
chmod -R 777 storage
{% endcodeblock %}</p>

<p>再次重整網頁！成功啦！</p>

<p>{% img /images/laravel_sample/laravel-3.jpg %}</p>

<p>接著我想把public這層路徑拔掉，所以把這層資料夾的<code>.htaccess</code>, <code>index.php</code>, <code>favicon.ico</code>這三個主要的檔案搬到外面，接著開啟<code>index.php</code>做些小修整，主要是修改兩個路徑而已，程式碼如下：</p>

<p>{% codeblock index.php lang:php %} 
require <strong>DIR</strong>.’/bootstrap/autoload.php’;
$app = require_once <strong>DIR</strong>.’/bootstrap/start.php’;
{% endcodeblock %}</p>

<p>把路徑修改成 <code>http://localhost/laravel_sample/</code></p>

<p>{% img /images/laravel_sample/laravel-4.jpg %}</p>

]]></content>
  </entry>
  
</feed>
