<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iPhone | Lighter]]></title>
  <link href="http://lighter.tw/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://lighter.tw/"/>
  <updated>2014-08-02T12:15:58+08:00</updated>
  <id>http://lighter.tw/</id>
  <author>
    <name><![CDATA[Willy lighter]]></name>
    <email><![CDATA[apple.xva@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 5]]></title>
    <link href="http://lighter.tw/blog/2014/07/31/bi-ji-swift-part-5/"/>
    <updated>2014-07-31T21:41:58+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/31/bi-ji-swift-part-5</id>
    <content type="html"><![CDATA[<h2 id="closure">closure</h2>

<p><code>closure</code>就有如同<code>c</code>、<code>objective-c</code>的block。<code>function</code>其實也可以當作參數一樣傳遞，下面用簡單的範例做練習。</p>

<p>{% img /images/swift/swift-36.jpg %}</p>

<!-- more -->

<p><code>closure</code>的格式如下</p>

<p>{% codeblock %}
{ (parameters) -&gt; returnType in
    statements
}
{% endcodeblock %}</p>

<p>單行的表示式<code>closure</code>可以省略<code>return</code>，參數的部分甚至可以省略寫成<code>$0</code>代表第一個參數，<code>$1</code>代表第二個參數，以此類推，下面用簡單的範例表示</p>

<p>{% img /images/swift/swift-37.jpg %}</p>

<p>下面這個範例只是單純的介紹寫法而已！</p>

<p><code>sort</code>這個方法預設是做了升序排列，如果你希望降序排列，可以傳入一個function(<code>closure</code>)進去。</p>

<ul>
  <li><code>寫法1</code>很單純，傳入已經寫好的function。</li>
  <li><code>寫法2</code>則是將方法名稱、參數、回傳值省略了，並且使用<code>$0</code>表示第一個參數，<code>$1</code>為第二個以以此類推。</li>
  <li><code>寫法3</code>則是把參數也給省略了，直接使用<code>&lt;</code>符號，swift則可以自動幫你推斷要將這兩個參數做<code>&lt;</code>的邏輯。</li>
</ul>

<p>{% img /images/swift/swift-38.jpg %}</p>

<h2 id="lazydeldel-with-closure">lazy(<del>懶惰的?</del>緩慢的) with closure</h2>

<p>什麼是<code>lazy</code>?，<code>就是當你真的需要使用，才真的會分配(記憶體)給你使用</code>。至於以前<code>objcetive-c</code>的寫法可以參考這篇文章<a href="http://mikebuss.com/2014/06/22/lazy-initialization-swift/">Lazy Initialization with Swift</a>，我覺得她寫很明確，所以我就用我理解的意思大概描述一遍，至於傳統的<code>objective-c</code>的寫法我就不贅述了，畢竟這邊是swift的note。</p>

<p><code>lazy</code>在swift的使用方式如下</p>

<p>{% codeblock %}</p>

<p>lazy var lazyVar = <a href="">String</a></p>

<p>{% endcodeblock %}</p>

<p>只需要在<code>var</code>前面加上<code>lazy</code>這個keyword，還有一點要注意的是<code>lazy</code>並不能使用<code>let</code>，因為常數在初始化前是必需要有值的。</p>

<blockquote>
  <p>原本的寫法是<code>@lazy</code>後來修改為<code>lazy</code>，把小老鼠<code>@</code>給省略了。</p>
</blockquote>

<p>如果你希望你的變數有會因為一些邏輯判斷而有不同的值，這時可以用<code>closure</code>來完成，下面這段code直接貼在playground是無法使用的，他會告訴你<code>lazy</code>必須是<code>struct</code>或<code>class</code>的成員。</p>

<p>{% codeblock %}</p>

<p>lazy var lazyStr:String = {
    // do you want
    return “This is a test”
}()</p>

<p>{% endcodeblock %}</p>

<p>在什麼時候你會需要使用使用<code>lazy</code>呢?如果你的變數的值，是需要等到物件初始化完成後才能明確的定義，這時你就會需要使用，下面使用一個簡單的範例；下面範例中可以看到<code>[unowned self]</code>，這是要避免<code>strong reference cycle</code>。</p>

<p>{% codeblock %}</p>

<p>class testClass {
    var name:String</p>

<pre><code>lazy var sayHiTo:String = {
    [unowned self] in
    return "Hi~ \(self.name)"
}()

init(name:String) {
    self.name = name

} }
</code></pre>

<p>var myClass = testClass(name: “Maya”)
// 實立化一個myClass後，這時sayHiTo變數 is nil</p>

<p>myClass.sayHiTo
// 當sayHiTo這個變數被呼叫到才真正的給予值</p>

<p>{% endcodeblock %}</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 4]]></title>
    <link href="http://lighter.tw/blog/2014/07/30/bi-ji-swift-part-4/"/>
    <updated>2014-07-30T21:16:15+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/30/bi-ji-swift-part-4</id>
    <content type="html"><![CDATA[<h2 id="class">class(類別)</h2>

<p>類別整個跟結構的寫法沒有太大的差異，直接看範例吧！</p>

<p>{% img /images/swift/swift-32.jpg %}</p>

<!-- more -->

<h2 id="section">繼承</h2>

<p>{% img /images/swift/swift-33.jpg %}</p>

<h2 id="class-func">class func(類別方法)</h2>

<p>類別方法可允許不用實立化物件而直接呼叫，只需要在方法前面加上<code>class</code>這個keyword；在<code>struct</code>則是要用<code>static</code>。</p>

<p>{% img /images/swift/swift-34.jpg %}</p>

<h2 id="class-ref">class ref</h2>

<p>class是參考型別，從下面的範例可以看到<code>myClass2</code>是參考<code>myClass1</code>，所以當<code>myClass1</code>有所改變，<code>myClass2</code>也會跟著改變；而struct並不會因為這樣就有所改變。</p>

<p>{% img /images/swift/swift-35.jpg %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 3]]></title>
    <link href="http://lighter.tw/blog/2014/07/26/bi-ji-swift-part-3/"/>
    <updated>2014-07-26T11:18:42+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/26/bi-ji-swift-part-3</id>
    <content type="html"><![CDATA[<h2 id="struct">Struct(結構)</h2>

<p>在<code>swift</code>，結構基本上跟類別(class)很像，直接先看簡單的範例吧！下面建立了一個<code>car</code>的結構，裡面包含了<code>color</code>和<code>number</code>，接著實立化這個<code>car</code>結構，整個跟類別很像吧！</p>

<p>{% img /images/swift/swift-29.jpg %}</p>

<!-- more -->

<p>接著再一個簡單的範例，<code>struct</code>裡面使用了別的<code>struct</code>，以及<code>struct</code>內含有方法</p>

<p>{% img /images/swift/swift-30.jpg %}</p>

<p>接這個範例能夠顯現<code>struct</code>跟類別不同的地方，在下面這個範例中可以看到<code>strunct</code>內的方法，會去操作內部的屬性，也就是<code>myName</code>，只要會去操作到內部的屬性值，在方法前面都需要加上<code>mutating</code>這個 keyword !</p>

<p>{% img /images/swift/swift-31.jpg %}</p>

<p>這是我參考stackoverflow這篇答案的[<a href="http://stackoverflow.com/a/24035861/685060">http://stackoverflow.com/a/24035861/685060</a>]，以下是我大意理解的節錄</p>

<blockquote>
  <p>結構跟類別(class)很像，不同的地方是結構有兩種模式，<code> immutable</code>/<code>mutable</code>，而類別通常的操作是用<code>reference</code>，而這種操作方式算是<code>mutable</code>，因為使用<code>reference</code>的方式操作，如果又是<code>immutable</code>的情況，這樣顯得非常困難。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 2]]></title>
    <link href="http://lighter.tw/blog/2014/07/23/bi-ji-swift-part-2/"/>
    <updated>2014-07-23T16:29:37+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/23/bi-ji-swift-part-2</id>
    <content type="html"><![CDATA[<h2 id="function">Function(函式，方法)</h2>

<p>方法的一開始前面一定有<code>func</code>這個關鍵字，我是有點覺得奇怪…何不乾脆用完整個名稱就好了，為什麼要縮減…成<code>func</code>。</p>

<p>{% img /images/swift/swift-21.jpg %}</p>

<!-- more -->

<h2 id="external-parameter-names">External Parameter Names(外部參數名)</h2>

<p><code>func</code>要帶入參數直接在<code>( )</code>內寫入，其中比較不同的是否有宣告外部參數，為了code的可讀性，加上外部參數名，可以直接了解該參數的作用，外部參數名跟參數名稱可以不一樣，如果你要將外部參數跟參數名稱設定一樣可以在參數名稱前面加上一個<code>#</code>號，這樣可省去重複打一樣的名稱。</p>

<p>{% img /images/swift/swift-22.jpg %}</p>

<h2 id="section">回傳值</h2>

<p>一個<code>func</code>要有回傳值，直接在<code>( )</code>後加上<code>-&gt; TYPE</code></p>

<p>{% img /images/swift/swift-23.jpg %}</p>

<p>如果有多個值要回傳，可以使用<code>Tuple</code></p>

<p>{% img /images/swift/swift-24.jpg %}</p>

<p>方法也可以當作參數傳入</p>

<p>{% img /images/swift/swift-25.jpg %}</p>

<h2 id="nested-function">Nested Function(嵌套函式)</h2>

<p><code>func</code>回傳除了一般的<code>Int</code>, <code>String</code>，也可以回傳<code>func</code></p>

<p>{% img /images/swift/swift-26.jpg %}</p>

<p>如果有多個參數要傳入，除了可以考慮組成一個陣列在傳入，或是可以用<code>...</code>當作有多個參數要傳入</p>

<p>{% img /images/swift/swift-27.jpg %}</p>

<h2 id="inout">inout</h2>

<p>這其實跟指標很像，下面的範例可以看到<code>sum</code>傳入的是<code>&amp;sum</code>也就是該參數的位置，所以計算的結果也會改變<code>sum</code>的值</p>

<p>{% img /images/swift/swift-28.jpg %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[學習iOS App 1]]></title>
    <link href="http://lighter.tw/blog/2013/09/16/xue-xi-ios-app-1/"/>
    <updated>2013-09-16T19:47:00+08:00</updated>
    <id>http://lighter.tw/blog/2013/09/16/xue-xi-ios-app-1</id>
    <content type="html"><![CDATA[<p>這篇並不是要寫學習iOS的文章，而是要推廣一下我翻譯的文章，幾個月前看到<a href="http://www.raywenderlich.com/">Raywenderlich</a>，裡面有些是翻譯過的文章，那我是否可以也來參加這個翻譯呢？於是我就寫信去問了，很高興的是他們也很歡迎我加入，於是就開始利用空閒時間來翻譯，由於在下小弟我英文不是很好…而且有時英文要翻譯成中文真的蠻困難的，翻譯的過程中也曾想是否應該念過一次在用我理解的方式翻譯，還是要照字面上翻譯呢？這蠻苦惱的！由於自己英文不是很好，所以花了一點時間翻譯，然後檢查幾次，終於翻譯好一篇了！</p>

<h1 id="ios-app-1welcome-to-programminghttpwwwraywenderlichcomzh-hans48771e5adb8e7bf92ios-app-1efbc9awelcome-to-programming"><a href="http://www.raywenderlich.com/zh-hans/48771/%E5%AD%B8%E7%BF%92ios-app-1%EF%BC%9Awelcome-to-programming">學習iOS App 1：Welcome to Programming</a></h1>

<p>或許你會覺得怎麼會跟簡體中文在一起呢？沒錯我也是翻譯完才發現這問題，我也寫信去跟他說繁體中文跟簡體中文是不一樣的，但是由於分配工作的問題，似乎也不能修改了。所以就這樣吧….現在還在翻譯第二篇中…其實翻譯還蠻有趣的說！</p>
]]></content>
  </entry>
  
</feed>
