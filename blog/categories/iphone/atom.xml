<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iPhone | Lighter]]></title>
  <link href="http://lighter.tw/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://lighter.tw/"/>
  <updated>2015-01-12T23:28:51+08:00</updated>
  <id>http://lighter.tw/</id>
  <author>
    <name><![CDATA[Willy lighter]]></name>
    <email><![CDATA[apple.xva@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[筆記]swift Part 7]]></title>
    <link href="http://lighter.tw/blog/2014/08/04/bi-ji-swift-part-7/"/>
    <updated>2014-08-04T23:49:38+08:00</updated>
    <id>http://lighter.tw/blog/2014/08/04/bi-ji-swift-part-7</id>
    <content type="html"><![CDATA[<h2 id="subscripts-">Subscripts 下標語法</h2>

<p>練習範例</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct testStruct {
</span><span class='line'>    let multiplier: Int
</span><span class='line'>    subscript(index:Int) -&gt; Int {
</span><span class='line'>        return multiplier * index
</span><span class='line'>    }
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>let stuct = testStruct(multiplier: 20)
</span><span class='line'>stuct[3]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import Cocoa&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>func randomizer(#range:Range&lt;uint32>) -&gt; UInt32 {
</span><span class='line'>    return range.startIndex + arc4random_uniform(range.endIndex - range.startIndex + 1)
</span><span class='line'>}&lt;/uint32>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>struct LevelMaker {
</span><span class='line'>    var grid = Array&lt;Array&lt;uint32>&gt;()&lt;/uint32>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>mutating func makeGrid() {
</span><span class='line'>    var numColumns = 27
</span><span class='line'>    var numRows = 52
</span><span class='line'>    for column in 0..&lt;numColumns {
</span><span class='line'>        var newRow = Array&lt;UInt32&gt;()
</span><span class='line'>        for row in 0..&lt;numRows {
</span><span class='line'>            newRow.append(randomizer(range:1..&lt;32))
</span><span class='line'>        }
</span><span class='line'>        self.grid.append(newRow)
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>subscript(row:Int, column:Int) -&gt; UInt32 {
</span><span class='line'>    return grid[row][column]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>init() {
</span><span class='line'>    makeGrid()
</span><span class='line'>} }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>var level2 = LevelMaker()
</span><span class='line'>level2.grid
</span><span class='line'>level2.grid[2][5]</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 6]]></title>
    <link href="http://lighter.tw/blog/2014/08/02/bi-ji-swift-part-6/"/>
    <updated>2014-08-02T15:57:18+08:00</updated>
    <id>http://lighter.tw/blog/2014/08/02/bi-ji-swift-part-6</id>
    <content type="html"><![CDATA[<h2 id="enums">Enums(列舉)</h2>

<p><code>enum</code>是定義一個通用型別的一組相關的值！我本身很少用，所以有點陌生…哈，還是來記錄一下，下面的code都是根據apple的文件練習的。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// enum 格式
</span><span class='line'>enum testEnum {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// 包含了東西南北的 compassPoint enum
</span><span class='line'>enum compassPoint {
</span><span class='line'>    case East
</span><span class='line'>    case West
</span><span class='line'>    case South
</span><span class='line'>    case North
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// 縮減為一行
</span><span class='line'>enum compassPoint2 {
</span><span class='line'>    case East, West, South, North
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>var directionToHead = compassPoint.West&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// 如果知道是 compassPoint形態，則可以忽略’compassPoint’
</span><span class='line'>// 直接使用 .East
</span><span class='line'>directionToHead = .East&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->

<h2 id="enum-with-switch">Enum with switch</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>enum compassPoint {
</span><span class='line'>    case East
</span><span class='line'>    case West
</span><span class='line'>    case South
</span><span class='line'>    case North
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>var directionToHead = compassPoint.East&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>switch directionToHead {
</span><span class='line'>    case .East:
</span><span class='line'>        println(“East”)
</span><span class='line'>    case .West:
</span><span class='line'>        println(“West”)
</span><span class='line'>    case .South:
</span><span class='line'>        println(“South”)
</span><span class='line'>    case .North:
</span><span class='line'>        println(“North”)
</span><span class='line'>    default:
</span><span class='line'>        println(“No value”)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="associated-value">Associated Value</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enum Barcode {
</span><span class='line'>    case UPCA(Int, Int, Int)
</span><span class='line'>    case QRCode(String)
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>var productBarcode = Barcode.UPCA(1, 123&lt;em>456&lt;/em>789, 222)
</span><span class='line'>productBarcode = .QRCode(“ABCDEFGHIJKLMNOP”)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>switch productBarcode {
</span><span class='line'>    case .UPCA(let numberSystem, let identifier, let check):
</span><span class='line'>        println(“UPC-A with value of (numberSystem), (identifier), (check).”)
</span><span class='line'>    case .QRCode(let productCode):
</span><span class='line'>        println(“QR code with value of (productCode).”)
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// 輸出 “QR code with value of ABCDEFGHIJKLMNOP.”</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="row-value">Row value</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>enum Number:Int {
</span><span class='line'>    case One = 1
</span><span class='line'>    case Two = 2
</span><span class='line'>    case Three = 3
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// 縮寫成一行，僅需定義一開始
</span><span class='line'>enum Number2: Int {
</span><span class='line'>    case One = 1, Two, Three
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// 使用 toRaw 來取得值 1
</span><span class='line'>var numberOne = Number.One.toRaw()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>// 將 1 轉回去取得 對應的 enum 值 One
</span><span class='line'>var numberTwo = Number.fromRaw(2)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>if let two = Number.fromRaw(2) {
</span><span class='line'>    switch two {
</span><span class='line'>        case .Two:
</span><span class='line'>            println(“It is number 2”)
</span><span class='line'>        default:
</span><span class='line'>            println(“Not found”)
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>else {
</span><span class='line'>    println(“Not found”)
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 5]]></title>
    <link href="http://lighter.tw/blog/2014/07/31/bi-ji-swift-part-5/"/>
    <updated>2014-07-31T21:41:58+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/31/bi-ji-swift-part-5</id>
    <content type="html"><![CDATA[<h2 id="closure">closure</h2>

<p><code>closure</code>就有如同<code>c</code>、<code>objective-c</code>的block。<code>function</code>其實也可以當作參數一樣傳遞，下面用簡單的範例做練習。</p>

<p><img src="/images/swift/swift-36.jpg"></p>

<!-- more -->

<p><code>closure</code>的格式如下</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ (parameters) -&gt; returnType in
</span><span class='line'>    statements
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>單行的表示式<code>closure</code>可以省略<code>return</code>，參數的部分甚至可以省略寫成<code>$0</code>代表第一個參數，<code>$1</code>代表第二個參數，以此類推，下面用簡單的範例表示</p>

<p><img src="/images/swift/swift-37.jpg"></p>

<p>下面這個範例只是單純的介紹寫法而已！</p>

<p><code>sort</code>這個方法預設是做了升序排列，如果你希望降序排列，可以傳入一個function(<code>closure</code>)進去。</p>

<ul>
  <li><code>寫法1</code>很單純，傳入已經寫好的function。</li>
  <li><code>寫法2</code>則是將方法名稱、參數、回傳值省略了，並且使用<code>$0</code>表示第一個參數，<code>$1</code>為第二個以以此類推。</li>
  <li><code>寫法3</code>則是把參數也給省略了，直接使用<code>&lt;</code>符號，swift則可以自動幫你推斷要將這兩個參數做<code>&lt;</code>的邏輯。</li>
</ul>

<p><img src="/images/swift/swift-38.jpg"></p>

<h2 id="lazydeldel-with-closure">lazy(<del>懶惰的?</del>緩慢的) with closure</h2>

<p>什麼是<code>lazy</code>?，<code>就是當你真的需要使用，才真的會分配(記憶體)給你使用</code>。至於以前<code>objcetive-c</code>的寫法可以參考這篇文章<a href="http://mikebuss.com/2014/06/22/lazy-initialization-swift/">Lazy Initialization with Swift</a>，我覺得她寫很明確，所以我就用我理解的意思大概描述一遍，至於傳統的<code>objective-c</code>的寫法我就不贅述了，畢竟這邊是swift的note。</p>

<p><code>lazy</code>在swift的使用方式如下</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>lazy var lazyVar = &lt;a href="">String&lt;/a>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>只需要在<code>var</code>前面加上<code>lazy</code>這個keyword，還有一點要注意的是<code>lazy</code>並不能使用<code>let</code>，因為常數在初始化前是必需要有值的。</p>

<blockquote>
  <p>原本的寫法是<code>@lazy</code>後來修改為<code>lazy</code>，把小老鼠<code>@</code>給省略了。</p>
</blockquote>

<p>如果你希望你的變數有會因為一些邏輯判斷而有不同的值，這時可以用<code>closure</code>來完成，下面這段code直接貼在playground是無法使用的，他會告訴你<code>lazy</code>必須是<code>struct</code>或<code>class</code>的成員。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>lazy var lazyStr:String = {
</span><span class='line'>    // do you want
</span><span class='line'>    return “This is a test”
</span><span class='line'>}()&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在什麼時候你會需要使用使用<code>lazy</code>呢?如果你的變數的值，是需要等到物件初始化完成後才能明確的定義，這時你就會需要使用，下面使用一個簡單的範例；下面範例中可以看到<code>[unowned self]</code>，這是要避免<code>strong reference cycle</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class testClass {
</span><span class='line'>    var name:String&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>lazy var sayHiTo:String = {
</span><span class='line'>    [unowned self] in
</span><span class='line'>    return "Hi~ \(self.name)"
</span><span class='line'>}()
</span><span class='line'>
</span><span class='line'>init(name:String) {
</span><span class='line'>    self.name = name
</span><span class='line'>
</span><span class='line'>} }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>var myClass = testClass(name: “Maya”)
</span><span class='line'>// 實立化一個myClass後，這時sayHiTo變數 is nil&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>myClass.sayHiTo
</span><span class='line'>// 當sayHiTo這個變數被呼叫到才真正的給予值&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 4]]></title>
    <link href="http://lighter.tw/blog/2014/07/30/bi-ji-swift-part-4/"/>
    <updated>2014-07-30T21:16:15+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/30/bi-ji-swift-part-4</id>
    <content type="html"><![CDATA[<h2 id="class">class(類別)</h2>

<p>類別整個跟結構的寫法沒有太大的差異，直接看範例吧！</p>

<p><img src="/images/swift/swift-32.jpg"></p>

<!-- more -->

<h2 id="section">繼承</h2>

<p><img src="/images/swift/swift-33.jpg"></p>

<h2 id="class-func">class func(類別方法)</h2>

<p>類別方法可允許不用實立化物件而直接呼叫，只需要在方法前面加上<code>class</code>這個keyword；在<code>struct</code>則是要用<code>static</code>。</p>

<p><img src="/images/swift/swift-34.jpg"></p>

<h2 id="class-ref">class ref</h2>

<p>class是參考型別，從下面的範例可以看到<code>myClass2</code>是參考<code>myClass1</code>，所以當<code>myClass1</code>有所改變，<code>myClass2</code>也會跟著改變；而struct並不會因為這樣就有所改變。</p>

<p><img src="/images/swift/swift-35.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[筆記]swift part 3]]></title>
    <link href="http://lighter.tw/blog/2014/07/26/bi-ji-swift-part-3/"/>
    <updated>2014-07-26T11:18:42+08:00</updated>
    <id>http://lighter.tw/blog/2014/07/26/bi-ji-swift-part-3</id>
    <content type="html"><![CDATA[<h2 id="struct">Struct(結構)</h2>

<p>在<code>swift</code>，結構基本上跟類別(class)很像，直接先看簡單的範例吧！下面建立了一個<code>car</code>的結構，裡面包含了<code>color</code>和<code>number</code>，接著實立化這個<code>car</code>結構，整個跟類別很像吧！</p>

<p><img src="/images/swift/swift-29.jpg"></p>

<!-- more -->

<p>接著再一個簡單的範例，<code>struct</code>裡面使用了別的<code>struct</code>，以及<code>struct</code>內含有方法</p>

<p><img src="/images/swift/swift-30.jpg"></p>

<p>接這個範例能夠顯現<code>struct</code>跟類別不同的地方，在下面這個範例中可以看到<code>strunct</code>內的方法，會去操作內部的屬性，也就是<code>myName</code>，只要會去操作到內部的屬性值，在方法前面都需要加上<code>mutating</code>這個 keyword !</p>

<p><img src="/images/swift/swift-31.jpg"></p>

<p>這是我參考stackoverflow這篇答案的[<a href="http://stackoverflow.com/a/24035861/685060">http://stackoverflow.com/a/24035861/685060</a>]，以下是我大意理解的節錄</p>

<blockquote>
  <p>結構跟類別(class)很像，不同的地方是結構有兩種模式，<code> immutable</code>/<code>mutable</code>，而類別通常的操作是用<code>reference</code>，而這種操作方式算是<code>mutable</code>，因為使用<code>reference</code>的方式操作，如果又是<code>immutable</code>的情況，這樣顯得非常困難。</p>
</blockquote>

]]></content>
  </entry>
  
</feed>
