<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iPhone | Lighter's Blog]]></title>
  <link href="http://lighter.github.com/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://lighter.github.com/"/>
  <updated>2012-10-31T09:55:40+08:00</updated>
  <id>http://lighter.github.com/</id>
  <author>
    <name><![CDATA[Willy lighter]]></name>
    <email><![CDATA[apple.xva@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS With Dropbox]]></title>
    <link href="http://lighter.github.com/blog/2012/10/28/ios-with-dropbox/"/>
    <updated>2012-10-28T00:38:00+08:00</updated>
    <id>http://lighter.github.com/blog/2012/10/28/ios-with-dropbox</id>
    <content type="html"><![CDATA[<p>{% img /images/iPhoneWithDropbox/1.png %}</p>

<p>iPhone上已經有iCloud可以用來同步及備份資料了，但iCloud有空間的限制，而有在使用Dropbox的人，如果有參加一些特殊的活動或者是學生的身份，都可以多取得到一些額外的空間容量(或者是有邀請許多朋友加入也都可以額外增加空間)。雖然Dropbox官方的說明已經很清楚了，但是我還是記錄一下，免得之後要用忘記....</p>

<!-- more -->


<p><strong>Step 1.建立Single View Application專案</strong></p>

<p><strong>Step 2.編輯MainStroyboard.storyboard檔案</strong></p>

<p>這邊我使用三個<code>Round Rect Button</code>，分別用來建立檔案、檢驗檔案是否存在與上傳檔案</p>

<p>{% img /images/iPhoneWithDropbox/2.png %}</p>

<p><strong>Step 3.建置Dropbox App</strong></p>

<p>到Dropbox開發者<a href="https://www.dropbox.com/developers">網站</a>，建立一個新的App。建立完成後可以看到Dropbox根據這個App會給你一個<code>App key</code>與<code>App secret</code>，到時會需要這兩個值。</p>

<p>下載Dropbox的Framework，並且加入到Xcode專案；還有要加入<code>Security.framework</code>與<code>QuartzCore.framework</code>到專案中。</p>

<p>{% img /images/iPhoneWithDropbox/3.png %}</p>

<p><strong>Step 4.編輯AppDelegate.m</strong></p>

<p>在<code>AppDelegate.m</code>中加入下列程式碼</p>

<p>{% codeblock AppDelegate.m lang:objc %}</p>

<h1>import &lt;DropboxSDK/DropboxSDK.h></h1>

<ul>
<li><p>(BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{
  DBSession* dbSession =</p>

<pre><code>  [[DBSession alloc]
      initWithAppKey:@"APP_KEY"
      appSecret:@"APP_SECRET"
      root:ACCESS_TYPE]; // either kDBRootAppFolder or kDBRootDropbox
</code></pre>

<p>  [DBSession setSharedSession:dbSession];
  return YES;
}</p></li>
<li><p>(BOOL)application:(UIApplication <em>)application handleOpenURL:(NSURL </em>)url {
if ([[DBSession sharedSession] handleOpenURL:url]) {
  if ([[DBSession sharedSession] isLinked]) {</p>

<pre><code>NSLog(@"App linked successfully!");
// At this point you can start making API calls
</code></pre>

<p>  }
  return YES;
}
// Add whatever other url handling code your app requires here
return NO;
}
{% endcodeblock %}</p></li>
</ul>


<p>**Step 5.編輯<code>專案名稱-Info.plist</code>檔案</p>

<p>使用<code>open source</code>開啟<code>專案名稱-Info.plist</code>，找到第一個<code><dict></code>在下方加入這段：</p>

<p>{% codeblock 專案名稱-Info.plist lang:objc %}
<key>CFBundleURLTypes</key>
<array></p>

<pre><code>&lt;dict&gt;
    &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;db-APP_KEY&lt;/string&gt;
    &lt;/array&gt;
&lt;/dict&gt;
</code></pre>

<p></array>
{% endcodeblock %}</p>

<p>**Step 6.編輯ViewController</p>

<p>首先在<code>ViewController.h</code>程式碼如下：</p>

<p>{% codeblock ViewController.h lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;DropboxSDK/DropboxSDK.h></h1>

<p>@interface ViewController : UIViewController<DBRestClientDelegate>
{
  DBRestClient *restClient;
}
- (IBAction)loginDropbox:(id)sender;
- (IBAction)upload:(id)sender;
- (IBAction)creatFile:(id)sender;</p>

<p>@end
{% endcodeblock %}</p>

<p>接著在<code>ViewController.m</code>撰寫三個方法的實作內容，並且撰寫一個<code>restClient</code>的getter方法。</p>

<p>{% codeblock ViewController.m lang:objc %}
- (DBRestClient *)restClient {
  if (!restClient) {</p>

<pre><code>restClient =
[[DBRestClient alloc] initWithSession:[DBSession sharedSession]];
restClient.delegate = self;
</code></pre>

<p>  }
  return restClient;
}</p>

<ul>
<li><p>(IBAction)loginDropbox:(id)sender {</p>

<p>if (![[DBSession sharedSession] isLinked]) {
  [[DBSession sharedSession] linkFromController:self];
} else {
  NSLog(@"linked");
}
}</p></li>
<li><p>(IBAction)upload:(id)sender {</p>

<p>NSArray <em>paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString </em>path = [[paths objectAtIndex:0]stringByAppendingPathComponent:@"file1.txt"];;
NSString *pathString = @"/";
[self.restClient uploadFile:@"file1.txt" toPath:pathString fromPath:path];</p></li>
</ul>


<p>}</p>

<ul>
<li><p>(IBAction)creatFile:(id)sender {
NSArray <em>paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString </em>path = [[paths objectAtIndex:0]stringByAppendingPathComponent:@"file1.txt"];;</p>

<p>// String to write
NSString <em>str = @"iPhone Developer Tips\nhttp://iPhoneDevelopTips,com";
NSError </em>error;
// Write the file
[str writeToFile:path atomically:YES encoding:NSUTF8StringEncoding error:&amp;error];</p>

<p>NSFileManager *filemgr;</p>

<p>filemgr = [NSFileManager defaultManager];</p>

<p>if ([filemgr fileExistsAtPath: path ] == YES)
  NSLog (@"File exists");
else
  NSLog (@"File not found");</p></li>
</ul>


<p>}
{% endcodeblock %}</p>

<p><strong>Step 7.編譯專案</strong></p>

<p>點選<code>link dropbox</code>按鈕，跟Dropbox做連接；在點選<code>create &amp; check</code>按鈕建立檔案與確認檔案是否存在；最後才點選<code>upload</code>按鈕，將建立的檔案上傳到Dropbox。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[將XCODE的程式發佈到iOS裝置]]></title>
    <link href="http://lighter.github.com/blog/2012/07/21/jiang-xcodede-cheng-shi-fa-bu-dao-ioszhuang-zhi/"/>
    <updated>2012-07-21T15:52:00+08:00</updated>
    <id>http://lighter.github.com/blog/2012/07/21/jiang-xcodede-cheng-shi-fa-bu-dao-ioszhuang-zhi</id>
    <content type="html"><![CDATA[<p>以下是我使用的作業環境</p>

<ul>
<li>Mac Lion 10.7.4</li>
<li>XCODE 4.3.3</li>
<li>iOS5.1 裝置為 iPhone 4</li>
</ul>


<!-- more -->


<p><strong>Step 1.製作假驗證</strong></p>

<p>首先在Finder的地方，點選前往 -> 工具程式。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone1.png %}</p>

<p>開啟鑰匙圈存取。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone2.png %}</p>

<p>選取鑰匙圈存取 -> 憑證輔助程式 -> 製作憑證。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone3.png %}</p>

<ul>
<li>名稱：fake</li>
<li>識別身分類型：自簽根</li>
<li>憑證類型：代碼簽名
*覆蓋預設值(勾選)</li>
</ul>


<p>繼續之後會跳出一個對話視窗一樣選取繼續。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone4.png %}</p>

<ul>
<li>序號：121212</li>
<li>有效時間：999</li>
</ul>


<p>接著一直繼續到最後。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone5.png %}</p>

<p>Step 2.修改XCODE讓他可以抓取到我們的製作的假驗證。</p>

<p>開啟應用程式資料夾，找到XCODE，右鍵 -> 顯示套件內容。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone6.png %}</p>

<p>依照Contents/Developer/Platforms/iPhoneOS.platform的路徑尋找到<code>Info.plist</code>。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone7.png %}</p>

<ol>
<li>將<code>Info.plist</code>複製到桌面上開啟，使用<code>cmd+f</code>尋找<code>CODE_SIGN_CONTEST_CLASS</code>，將原本的預設值改為<code>XCCodeSignContext</code>(共有兩個地方要修改)。</li>
<li><code>RuntimeRequirements -> Classes -> item 0</code>的預設值也改為<code>XCCodeSignContext</code>。</li>
</ol>


<p><strong>ps.這樣總共有三個地方要修改為<code>XCCodeSignContext</code>。</strong></p>

<p>修改完後將該檔案貼回原本的地方並且取代掉。</p>

<p>Step 3.修改專案。</p>

<p>接著在你的<code>XCODE</code>專案，點選專案的設定檔<code>PROJECT</code> -> <code>Build Settings</code> -> <code>Code Signing</code> -> <code>Code Signing Identity</code>。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone8.png %}</p>

<p>將裡面的憑證選取您剛新增的金鑰名稱，這裡使用之前已經建立好的<code>fake code sign</code>，所以會跟前面有所不同！！</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone9.png %}</p>

<p>建立完之後在編譯專案的右邊，選取我們要發佈的裝置，記得裝置必須先與電腦連接。接著就可以編譯發佈到實體裝置上了。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone12.png %}</p>

<p>發佈的時候如果點選App後馬上閃退的話，這時修改一下<code>Scheme</code>。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone10.png %}</p>

<p>選擇第二個<code>Run XXX.app</code> -> <code>Info</code> -> <code>Debugger</code> -> 選取<code>GDB</code>，最後按下OK，再次重新編譯專案發佈到實體裝置，應該就可以解決閃退的問題了。</p>

<p>{% img /images/xcodeToiPhone/xcodeToiPhone11.png %}</p>

<h3>參考資料</h3>

<ol>
<li><a href="http://tw.myblog.yahoo.com/pcman-128/article?mid=850&amp;prev=-2&amp;next=-2&amp;page=1&amp;sc=1#yartcmt">如何將Xcode的程式發布到iOS裝置(免年費)</a></li>
<li><a href="http://wangshifuola.blogspot.tw/2012/04/ioserror-launching-remote-program.html">iOS學習_Error launching remote program: failed to get the task for process</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Data-Part2]]></title>
    <link href="http://lighter.github.com/blog/2012/06/02/core-data-part2/"/>
    <updated>2012-06-02T14:36:00+08:00</updated>
    <id>http://lighter.github.com/blog/2012/06/02/core-data-part2</id>
    <content type="html"><![CDATA[<p>上一篇中，僅對於基本的Core Data的流程有個初步的概念，但是光看<code>NSLog</code>訊息還是有點生疏，而且依照我目前的程度，是很少去修改到<code>AppDelegate</code>的部份，所以接著嘗試試著修改<code>Master Detail Application</code>看看。</p>

<p>最後的結果是希望可以在<code>Table View</code>中看到我新增的姓名，點選該姓名可以看到該姓名的電話。</p>

<p>{% img /images/iPhone/coredata2-1.png 216px 390px %}
{% img /images/iPhone/coredata2-2.png 216px 390px %}
{% img /images/iPhone/coredata2-3.png 216px 390px %}</p>

<!-- more -->


<p><strong>Step 1.</strong>建立<code>Master Detail Application</code>的專案，專案名稱為core data example。</p>

<p><strong>Step 2.</strong>開啟<code>core_data_example.xcdatamodeld</code>，將原本專案預設的<code>Entity</code>刪除，另外新增一個<code>Phone</code>的<code>Entity</code>，並新增兩個<code>Attributes</code>，name、number，如下圖。</p>

<p>{% img /images/iPhone/coredata2-4.png %}</p>

<p><strong>Step 3.</strong>新增<code>Managed Object Model</code>，對著專案右鍵<code>New File</code>➔<code>iOS</code>➔<code>Core Data</code>➔<code>NSManagedObjectsubclass</code>，接著會自動新增二個檔案，<code>Phone.m</code>跟<code>Phone.h</code>。</p>

<p>如果沒有直接自動產生，應該會出現以下的畫面，只需要勾選並且下一步即可。</p>

<p>{% img /images/iPhone/coredata2-5.png %}
{% img /images/iPhone/coredata2-6.png %}</p>

<p><strong>Step 4.</strong>修改<code>MainStoryboard.storyboard</code>。</p>

<p>在<code>Navigation</code>的右方加入一個<code>Bar Button Item</code>，點選新增是會跑到上面的畫面，讓我們新增姓名還有電話，下面則是點選姓名時可以看到該姓名的電話。因此需要新增一個<code>AddDetailViewController</code>來控制該新增畫面。在此就不多贅述。</p>

<p>{% img /images/iPhone/coredata2-7.png %}</p>

<p><strong>Step 5.</strong>編輯<code>AddDetailViewController</code>。</p>

<ol>
<li>import<code>Phone.h</code>，因為需要透過它來得知<code>Entity</code>的<code>name</code>、<code>number</code>。</li>
<li>import<code>AppDelegate.h</code>，因為需要使用它裡面的<code>NSManagedObjectContext</code>，所以在此無需重複定義。</li>
<li>二個<code>UITextField</code>顧名思義就是對應到畫面上二個Text使用的。</li>
<li><code>app</code>就是要用來引用<code>NSManagedObjectContext</code>。</li>
<li><code>save</code>就是在新增的畫面的Navigation右方，按下save按鈕儲存資料。</li>
</ol>


<p>{% codeblock AddDetailViewController.h lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import "Phone.h"</h1>

<h1>import "AppDelegate.h"</h1>

<p>@interface AddDetailViewController : UIViewController
{</p>

<pre><code>UITextField *name_;
UITextField *number_;
</code></pre>

<p>}
@property (strong, nonatomic) IBOutlet UITextField <em>name;
@property (strong, nonatomic) IBOutlet UITextField </em>number;
@property (retain, nonatomic) AppDelegate *app;</p>

<p>-(IBAction)save:(id)sender;
@end
{% endcodeblock %}</p>

<p>第5行，取得AppDelegate的<code>delegate</code></p>

<p>第6行，透過app取得AppDelegete的<code>NSManagedObjectContext</code></p>

<p>第7行，定義要加入的Entity是Phone。</p>

<p>第9行，用一個<code>if</code>檢查欄位的值是否為空白，當不是空白的時候才寫入。</p>

<p>第18~22，當寫入發生錯誤時才會執行。</p>

<p>{% codeblock AddDetailViewController.m lang:objc %}
@synthesize name = name<em>, number = number</em>, app;</p>

<p>-(IBAction)save:(id)sender
{</p>

<pre><code>app = [[UIApplication sharedApplication] delegate];
NSManagedObjectContext *context = [app managedObjectContext];
Phone *phone = [NSEntityDescription insertNewObjectForEntityForName:@"Phone" inManagedObjectContext:context];

if (name_.text.length &lt;= 0 || number_.text.length &lt;= 0 ) {
    NSLog(@"Nope");
}
else {
    phone.name = name_.text;
    phone.number = [NSNumber numberWithInteger:[number_.text integerValue]];
    [self.navigationController popViewControllerAnimated:YES];
}

NSError *error;

if (![context save:&amp;error]) {
    NSLog(@"Woops");
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Step 6.</strong>編輯<code>MasterViewController.m</code>。</p>

<p>這裡僅需要搜尋<code>Event</code>，並且改成<code>Phone</code>取代(因為Entity已經被我換掉了)，還有搜尋<code>timeStamp</code>，並且改成<code>name</code>取代(因為Attribute已經不是timeStamp，我們在<code>Table View</code>中希望呈現姓名，因此改成<code>name</code>)。</p>

<p>最後記得要將<code>viewDidLoad</code>內的方法刪除，僅留下第一行即可(如下)。</p>

<p>{% codeblock MasterViewController.m lang:objc %}
- (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Step 7.</strong>編輯<code>DetailViewController</code></p>

<p>因為比原本的專案多了一個<code>UILabel</code>元件，所以要多定義一個，並且找到<code>configureView</code>方法，加入第8行設定<code>detailNumber</code>，而<code>valueForKey</code>記得要修改成跟<code>Entity</code>對應的name、number。</p>

<p>{% codeblock DetailViewController.h lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface DetailViewController : UIViewController</p>

<p>@property (strong, nonatomic) id detailItem;</p>

<p>@property (strong, nonatomic) IBOutlet UILabel <em>detailDescriptionLabel;
@property (strong, nonatomic) IBOutlet UILabel </em>detailNumber;
@end
{% endcodeblock %}</p>

<p>{% codeblock DetailViewController.m lang:objc %}
@synthesize detailNumber = _detailNumber;</p>

<ul>
<li>(void)configureView
{
  // Update the user interface for the detail item.
  if (self.detailItem) {

<pre><code>  self.detailDescriptionLabel.text = [[self.detailItem valueForKey:@"name"] description];
  self.detailNumber.text = [[self.detailItem valueForKey:@"number"] description];
</code></pre>

<p>  }
}
{% endcodeblock %}</p></li>
</ul>


<p>Step 8.建立關連</p>

<p>最後就是將元件跟<code>IBOutlet</code>、<code>IBAction</code>建立關連，在此就不多做贅述了。</p>

<p>範例下載：<a href="https://lighter@github.com/lighter/Core-Data-Example.git">Download here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Map View]]></title>
    <link href="http://lighter.github.com/blog/2012/05/08/map-view/"/>
    <updated>2012-05-08T11:13:00+08:00</updated>
    <id>http://lighter.github.com/blog/2012/05/08/map-view</id>
    <content type="html"><![CDATA[<p><code>Map View</code>很常在尋找定位或是路線導覽中看到，接著簡單示範Map View的操作。
該範例使用<code>Segmented Contrl</code>來切換<code>Map View</code>的樣式，並且定位出目前的所在位址(如下第三張圖)。</p>

<p>{%  img /images/iPhone/mapViews1.jpeg %}
{%  img /images/iPhone/mapViews2.jpeg %}
{%  img /images/iPhone/mapViews4.jpeg %}</p>

<!-- more -->


<p><strong>Step 1.</strong>建立<code>Single View</code>專案，專案名稱為Map View</p>

<p><strong>Step 2.</strong>編輯MainStoryboard.storyboard</p>

<p>加入：</p>

<ol>
<li>Toolbar</li>
<li>Segmented Control</li>
<li>Bar Button Item</li>
<li>Flexible Space Bar Button Item</li>
<li>Map View</li>
</ol>


<p>{% img /images/iPhone/mapViews5.jpeg %}</p>

<p><strong>Step 3.</strong>加入<code>MapKit</code>的framework</p>

<p>在檔案瀏覽的地方點選專案，接著畫面中間選擇<code>TARGETS</code>在往右邊上方找到<code>Build Phases</code>，下方可看到<code>Link Binary With Libraries</code>，點選下方的<cde>＋</code>加號，將<code>MapKit.framework</code>加進來。加入成功以後在你的專案資料夾內即可看到一個<code>MapKit.framework</code></p>

<p>{% img /images/iPhone/mapViews6.jpeg %}</p>

<p><strong>Step 4.</strong>編輯ViewController.h</p>

<ol>
<li>引入<code>MapKit/MapKit.h</code></li>
<li>定義變數，如同程式碼所述</li>
<li>定義兩個<code>IBAction</code>，該用途如程式碼的註解</li>
</ol>


<p>{% codeblock lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;MapKit/MapKit.h></h1>

<p>@interface ViewController : UIViewController
{</p>

<pre><code>MKMapView *mapView_;
UISegmentedControl *segmented_;
</code></pre>

<p>}
@property (strong, nonatomic) IBOutlet MKMapView <em>mapView;
@property (strong, nonatomic) IBOutlet UISegmentedControl </em>segmented;</p>

<p>-(IBAction)showLocation:(id)sender; //顯示定位
-(IBAction)changeMapType:(id)sender; //改變地圖的type
@end
{% endcodeblock %}</p>

<p><strong>Step 5.</strong>編輯ViewController.m</p>

<p>一樣要先補上<code>synthesize</code>，接著是撰寫<code>showLocation:</code>，該方法很簡單，只要定義<code>mapView</code>的<code>showsUserLocation</code>為</code>YES</code>即可顯示目前該使用者的位址。</p>

<p>{% codeblock lang:objc %}
@synthesize mapView = mapView<em>, segmented = segmented</em>;</p>

<p>-(IBAction)showLocation:(id)sender
{</p>

<pre><code>self.mapView.showsUserLocation = YES;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>在改變地圖的模式，使用<code>Segmented Control</code>，操作的方式如同<a href="http://lighter.github.com/blog/2012/05/01/segmented-controller/">Segmented Control</a>，唯一不同的是在<code>case</code>內執行的東西；在<code>case</code>內去改變<code>mapView</code>的<code>mapType</code>，地圖模式一共有三種模式可以更換，因此您可以依自己的需求去做變換。</p>

<p>{% codeblock lang:objc %}
-(IBAction)changeMapType:(id)sender
{</p>

<pre><code>NSInteger segmentedNum;
segmentedNum = self.segmented.selectedSegmentIndex;
switch (segmentedNum) {
    case 0:
        self.mapView.mapType = MKMapTypeStandard;
        break;
    case 1:
        self.mapView.mapType = MKMapTypeSatellite;
        break;
    case 2:
        self.mapView.mapType = MKMapTypeHybrid;
        break;
    default:
        break;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p><strong>Step 6.</strong>建立關連</p>

<p>{% img /images/iPhone/mapViews7.jpeg %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Data-Part1]]></title>
    <link href="http://lighter.github.com/blog/2012/05/08/core-data-part1/"/>
    <updated>2012-05-08T10:52:00+08:00</updated>
    <id>http://lighter.github.com/blog/2012/05/08/core-data-part1</id>
    <content type="html"><![CDATA[<p><code>Core Data</code>主要分成三個部分</p>

<ol>
<li>Managed Object Context</li>
<li>Persistent Store Coordinator</li>
<li>Persistent Object Store</li>
</ol>


<p><code>Managed Object Context</code>這類別記載了我們的App在記憶體中所有的<code>Entity</code>，當你要求Core Data載入物件時，你必須先向<code>Managed Object Context</code>提出要求。</p>

<p>...假如不存在記憶體中的話，它會向<code>Persistent Store Coordinator</code>發出請求，試著嘗試尋找它。</p>

<p><code>Persistent Store Coordinator</code>的任務是追蹤<code>Persistent Object Store</code>，而<code>Persistent Object Store</code>實際知道如何讀寫資料。</p>

<p><code>Managed Object Model</code>則是用來處理資料的，這些元件都知道要如何處理資料。</p>

<p>整個流程大致上如下圖：</p>

<p>{% img /images/iPhone/coredatas1.jpeg %}</p>

<!-- more -->


<p><strong>Step 1.</strong>建立<code>Empty Application</code>，專案名稱為core data example</p>

<p>{% img /images/iPhone/coredatas2.jpeg %}</p>

<p>記得要將<code>Use Core Data</code>打勾。</p>

<p>{% img /images/iPhone/coredatas3.jpeg %}</p>

<p><strong>Step 2.</strong> 編輯core_data_sample.xcdatamodeld</p>

<p>首先開啟<code>core_data_sample.xcdatamodeld</code>這個檔案，點選中間下方的<code>Add Entity</code>，並輸入<code>Phone</code>(註：第一個字要大寫)，接著在右邊可以找到<code>Attributes</code>，點選<code>＋</code>加號，加入兩個屬性分別為<code>name</code>、<code>number</code>，其型態分別為<code>String</code>
、<code>Integer 32</code>。</p>

<p>{% img /images/iPhone/coredatas4.jpeg %}</p>

<p><strong>Step 3.</strong>建立<code>Phone.m、Phone.h</code></p>

<p>點選專案資料夾，右鍵➔New File。</p>

<p>{% img /images/iPhone/coredatas5.jpeg %}</p>

<p>選擇iOS➔Core Data➔NSManagedObject subclass，接著都直接下一步。</p>

<p>{% img /images/iPhone/coredatas6.jpeg %}</p>

<p>接著可以在專案的資料夾內會出現<code>Phone.m、Phone.h</code></p>

<p>{% img /images/iPhone/coredatas7.jpeg %}</p>

<p>在這兩個檔案可看到裡面的變數都是跟xcdatamodeld內的有相關連的</p>

<p>{% codeblock Phone.h lang:objc %}</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<h1>import &lt;CoreData/CoreData.h></h1>

<p>@interface Phone : NSManagedObject</p>

<p>@property (nonatomic, retain)  NSString * name;
@property (nonatomic, retain) NSNumber * number;</p>

<p>@end
{% endcodeblock %}</p>

<p>這邊的<code>@dynamic</code>主要是告知 compiler 不要產生<code>setter、getter</code>，而是由程式本身來實作甚至是直到 Runtime 時以 Dynamic Loading 方式連結。</p>

<p>{% codeblock Phone.m lang:objc %}</p>

<h1>import "Phone.h"</h1>

<p>@implementation Phone</p>

<p>@dynamic name;
@dynamic number;</p>

<p>@end
{% endcodeblock %}</p>

<p><strong>Step .4</strong>編輯AppDelegate.m</p>

<p>在該檔案內自行新增一個<code>creatData</code>方法
{% codeblock AppDelegate.m lang:objc %}
-(void)creatData{</p>

<pre><code>NSManagedObjectContext *context = [self managedObjectContext];

Phone *detail = [NSEntityDescription insertNewObjectForEntityForName:@"Phone" inManagedObjectContext:context];
detail.name = @"Mary";
detail.number = [NSNumber numberWithInt:323232123];

NSError *error;
if(![context save:&amp;error]){
    NSLog(@"error");
}

//撈取資料
NSFetchRequest *request = [[NSFetchRequest alloc] init];
NSEntityDescription *entity = [NSEntityDescription entityForName:@"Phone" inManagedObjectContext:context];
[request setEntity:entity];

NSArray *array = [context executeFetchRequest:request error:&amp;error];
for (Phone *pho in array) {
    NSLog(@"Name: %@", pho.name);
    NSLog(@"Number: %@", pho.number);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>{% codeblock AppDelegate.m lang:objc %}
- (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>[self creatData];   //加入這行
self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
self.window.backgroundColor = [UIColor whiteColor];
[self.window makeKeyAndVisible];
return YES;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>最後編譯後，可以在Debug的地方看到<code>NSLog</code>的訊息。</p>

<p>參考資料：</p>

<ol>
<li><a href="http://www.youtube.com/watch?v=QBrkavVJsw0&amp;feature=relmfu">iPhone Core Data 1 - Intro</a></li>
<li><a href="http://stackoverflow.com/questions/1160498/synthesize-vs-dynamic-what-are-the-differences">@synthesize vs @dynamic, what are the differences?</a></li>
<li><a href="http://rintarou.dyndns.org/2011/07/12/the-objective-c-programming-guide-%E5%85%A5%E9%96%80%E7%AD%86%E8%A8%98/">The Objective-C Programming Guide 入門筆記</a></li>
<li><a href="http://blog.csdn.net/zyc851224/article/details/7387805">iPhone开发之CoreData(基础篇)</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
